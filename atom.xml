<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小康博客</title>
  
  <subtitle>计算化学与分子模拟爱好者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kangsgo.com/"/>
  <updated>9999-11-12T12:37:22.000Z</updated>
  <id>http://kangsgo.com/</id>
  
  <author>
    <name>kangsgo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分子模拟网站推荐</title>
    <link href="http://kangsgo.com/2.html"/>
    <id>http://kangsgo.com/2.html</id>
    <published>9999-11-27T18:37:22.000Z</published>
    <updated>9999-11-12T12:37:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：待编辑</p><h3 id="1-内容性推荐"><a href="#1-内容性推荐" class="headerlink" title="1.内容性推荐"></a><span style="color: #3366ff;">1.内容性推荐</span></h3><h4 id="综合性网站推荐："><a href="#综合性网站推荐：" class="headerlink" title="综合性网站推荐："></a>综合性网站推荐：</h4><p><a href="http://emuch.net/bbs/forumdisplay.php?fid=322" target="_blank" rel="external">小木虫论坛</a>：一个综合性的论坛，项目非常杂，但是里面有非常多的资料分享。感觉对于交流和求知比较欠缺 。</p><p><a href="http://www.bioms.org" target="_blank" rel="external">bioms分子模拟论坛</a>：是一个专业性质的论坛，主要集中讨论计算机辅助药物设计这一快，氛围非常好，但是最近活跃度有所下降。</p><p><a href="http://jerkwin.github.io/" target="_blank" rel="external">哲科文</a>：李继存老师的个人博客，主要是gromacs的一些中文教程，老师人也非常好</p><p><a href="http://platinhom.github.io/" target="_blank" rel="external">勤力既懒猪</a>：一些模拟方面的教程</p><p><a href="http://bbs.keinsci.com/forum.php" target="_blank" rel="external">计算化学公社</a>：有论坛和门户网站，具体没有发掘~主要是看到了VMD的教程</p><p><a href="http://sobereva.com/54" target="_blank" rel="external">思想家公社的门口</a>：博客</p><p><a href="http://spaces.ac.cn/" target="_blank" rel="external">科学空间</a>: 并不是一个严格的分子模拟网站，更多的是算法相关的资源分享，还是非常推荐查看的</p><p><a href="http://blog.sina.com.cn/aj426q" target="_blank" rel="external">吴钩白的博客</a>: 我最崇拜的学长之一，知识渊博，喜欢亲切的叫他一声老师</p><p><a href="http://howiedlut.top/" target="_blank" rel="external">Howie</a>：永远相信美好的事情终将发生</p><p><a href="http://blog.csdn.net/u012325865?viewmode=contents" target="_blank" rel="external">AspirinCode</a> 和 <a href="http://www.aspirincode.com/" target="_blank" rel="external">Hexo版本</a>:  建民兄的博客，其对药物设计有非常独特的见解</p><h4 id="QQ群："><a href="#QQ群：" class="headerlink" title="QQ群："></a>QQ群：</h4><p>BioMS分子模拟-药物设计 <span style="color: #ff6600;">68093966  </span> 【十分活跃】</p><p>药物研发科学计算 <span style="color: #ff6600;">205448601</span></p><p>GROMACS中文组 <span style="color: #ff6600;">132266540    </span>【专一性强，很热心】</p><p>「药设之道」医药R&amp;D <span style="color: #ff6600;">426442973</span></p><p>分子模拟技术交流 <span style="color: #ff6600;">397981984     <span style="color: #000000;">【田老师组织的群，很活跃】</span></span></p><p>计算生命科学  <span style="color: #ff6600;">496548248</span></p><h4 id="微信公众号："><a href="#微信公众号：" class="headerlink" title="微信公众号："></a>微信公众号：</h4><p><span style="color: #ff6600;">生物研究生</span> 分子模拟牛人小9创立的一个分享分子模拟方面内容的微信公众号</p><p><span style="color: #ff6600;">分子模拟之道</span> 李老师创办的生物模拟资讯公众号，内容不多但是篇篇精华</p><p><span style="color: #ff6600;">王初课题组</span> 好文章的推荐公众号</p><p><span style="color: #ff6600;">生信杂谈</span> 分子模拟与生物信息杂交体</p><p><span style="color: #ff6600;">克里科学苑</span>  致力于组织生命科学及医学领域科研及应用培训的专业机构</p><p><span style="color: #ff6600;">药设之道</span>  致力于向大众和专业工作者传播药物设计新方法的公众号</p><h3 id="2-软件推荐与教程"><a href="#2-软件推荐与教程" class="headerlink" title="2.软件推荐与教程"></a><span style="color: #3366ff;">2.软件推荐与教程</span></h3><p>1.序列比对</p><p>ClustaX ：  没有做过多深入了解</p><p>2.蛋白建模</p><p>2.1同源建模</p><p><a href="https://salilab.org/modeller/" target="_blank" rel="external">Modeller</a>：同源建模经典网站</p><p>Easymodeller：Modeller的可视化界面，深入学习的话不建议学</p><p><a href="http://www.swissmodel.expasy.org/" target="_blank" rel="external">Swiss-model</a>：在线建模网站，质量不错，可操控性高</p><p>2.2从头建模</p><p><a href="http://zhanglab.ccmb.med.umich.edu/" target="_blank" rel="external">I-TASSER</a>：Zhang实验室制作的一个从头建模在线服务器</p><p>Rostta：综合性软件，学术免费</p><p>2.3模型评价</p><p><a href="http://services.mbi.ucla.edu/SAVES/" target="_blank" rel="external">SAVES</a>：包含XdVal | MTZdump | Ramachandran Plot | pdbU | pdbSNAFU  | PROCHECK | Verify3D | ERRAT 多种评价，其中常用Ramachandran Plot和ERRAT2</p><p>2.4 结构准备</p><p><a href="http://openbabel.org/" target="_blank" rel="external">OpenBabel</a>：一个格式转换工具，具有本地编译包和多种语言的API</p><p><a href="http://kinemage.biochem.duke.edu/software/reduce.php" target="_blank" rel="external">Reduce</a>： 一个加氢删氢的命令行工具，仅支持PDB格式</p><p>3.分子对接</p><p><a href="http://dock.compbio.ucsf.edu/DOCK_6/index.htm" target="_blank" rel="external">DOCK</a>: UCSF DOCK,现在是第6版，同样具有柔性对接和刚性对接，对接的结果评价中等，学术免费，需要搭配Chimera使用。平台：linux</p><p><a href="http://autodock.scripps.edu/" target="_blank" rel="external">AutoDock</a>：最为经典的对接软件，有一款HIV药物据说就是它的功劳，使用广泛，但是速度和准确度很低，据飞天说能量打分尚可。平台：linux/windows</p><p><a href="http://autodock.scripps.edu/" target="_blank" rel="external">AutoDock Vina</a>： 与AutoDock为同一实验室不同课题组产物，速度和准确度都有较大的提高，算是免费里面做的最好之一了。平台：linux/windows</p><p><a href="http://gemdock.life.nctu.edu.tw/dock/igemdock.php" target="_blank" rel="external">Igemdock</a>：台湾设计的一款对接软件，选择活性区域位点比较麻烦，但是准确度高（据华中师大-精灵测试）。平台：linux/windows</p><p>LibDock： 对接速度快，Discover Studio集成，不是一般人买得起。平台：linux/windows</p><p>CDOCK：相对于LibDock更为精确。平台：linux/windows</p><p>LigandFit： 柔性对接，同上，这三款都是DS集成的对接。平台：linux/windows</p><p><a href="http://pc1664.pharmazie.uni-marburg.de/drugscore/" target="_blank" rel="external">DrugScoreX</a>： DrugScoreX是一个较新的，对于蛋白配体打分具有比DrugScore更高精度的软件，其打分功能是基于统计势能？(statistical potentials)</p><p><a href="http://kangsgo.com/665.html">LigScore</a>： 与DrugScore的算法类似,提供本地(IMP 工具包)以及在线服务。</p><p><a href="http://poseview.zbh.uni-hamburg.de/" target="_blank" rel="external">PoseViewWeb</a> : 在线的对接2D相互关系图形显示工具</p><p>4.分子模拟/分子动力学 MD</p><p><a href="http://www.gromacs.org/" target="_blank" rel="external">gromacs</a>: 一个开源的分子动力学模拟软件</p><p><a href="http://ambermd.org/" target="_blank" rel="external">Amber</a>: 一个以生物为主导的分子动力学模拟软件，GPU加速模块收费</p><p><a href="http://openmm.org/" target="_blank" rel="external">OpenMM</a>： 一个开源的分子动力学模拟软件，发展很好，但是社区和一类模拟软件还是有差距</p><p><a href="http://openmd.org/" target="_blank" rel="external">OpenMD</a>: 小型模拟软件</p><p><a href="http://www.cgmartini.nl/index.php" target="_blank" rel="external">Martini</a>: 最为流行的粗粒化力场</p><p><a href="http://kangsgo.com/681.html">LigParGen: </a>配体OPLS/CM1A力场在线生成</p><p>4.1 体积检测：</p><p><a href="http://kangsgo.com/306.html">Epock</a>   Epock是一个可以动态计算结合腔大小的一个软件，由于有VMD的可视化软件，所以非常的容易上手，简单~</p><p><a href="http://kangsgo.com/443.html"> fpocket2</a>  具有在线服务器的体积检测软件，在线服务:<a href="http://bioserv.rpbs.univ-paris-diderot.fr/services/fpocket/" target="_blank" rel="external">点我进去</a></p><p>4.2 综合轨迹分析工具</p><p><a href="http://mdtraj.org/1.9.0/" target="_blank" rel="external">MDTraj</a>  可以进行轨迹转化，氢键分析等较为底层的工具包，但是非常好用</p><p><a href="http://www.mdanalysis.org/" target="_blank" rel="external">MDAnalysis</a>  完全用Python编写的分析工具包</p><p><a href="http://www.plumed.org/" target="_blank" rel="external">PLUMED</a>  一个非常有名的分子模拟分析工具，暂时没有看</p><p>5.药效团构建</p><p>6.毒理测试</p><p>7.可视化软件</p><p><a href="http://openastexviewer.net/web/" target="_blank" rel="external">AstexViewer3.0</a>  是一个基于java的轻量级软件，虽然功能简单，但是五脏俱全，特别是可以进行电子密度图查看，相对于pymol和vmd比较容易上手，其一些软件的设置方式与pymol和vmd类似，适合新学者或者编写脚本批量分析。</p><p><a href="http://www.pymol.org/" target="_blank" rel="external">Pymol </a> 一个跨平台的可视化开源软件，后因被薛定谔公司收购，有一部分发展为闭源更新</p><p><a href="http://www.ks.uiuc.edu/Research/vmd/" target="_blank" rel="external">VMD </a> 一个以命令行为主的开源可视化软件，个人感觉发展势头优于pymol，且可以和gromacs较好的连用，NAMD，amber的集成性也较好</p><p><a href="http://www.cgl.ucsf.edu/chimera/" target="_blank" rel="external">Chimera</a>  UCSF chimera 功能强大，可以与dock连用</p><p><a href="https://www.cgl.ucsf.edu/chimerax/" target="_blank" rel="external">ChimeraX</a> 下一代可视化软件，作图美丽但是功能暂时比较少</p><p><a href="http://autodock.scripps.edu/" target="_blank" rel="external">PMV</a> Autodock/Autodock搭配的可视化软件，使用的人较少，一般都是用autodock搭配着使用的</p><p>8.开发库</p><p><a href="http://biopython.org/wiki/Main_Page" target="_blank" rel="external">Biopython</a>：一个Python工具包，中文文档可以<a href="http://biopython-cn.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">点此</a>查看</p><p><a href="http://scikit-bio.org/" target="_blank" rel="external">scikit-bio</a>: 一个提供多种生物科学功能，数据结构和算法的Python包</p><p>9.综合性软件</p><p>最后更新:2017/12/09</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料：待编辑&lt;/p&gt;
&lt;h3 id=&quot;1-内容性推荐&quot;&gt;&lt;a href=&quot;#1-内容性推荐&quot; class=&quot;headerlink&quot; title=&quot;1.内容性推荐&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color: #3366ff;&quot;&gt;1.内容性推荐&lt;/span&gt;&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="推荐" scheme="http://kangsgo.com/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>系列笔记整理</title>
    <link href="http://kangsgo.com/87.html"/>
    <id>http://kangsgo.com/87.html</id>
    <published>9999-10-03T18:32:44.000Z</published>
    <updated>2017-12-09T12:36:45.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Gromacs笔记整理"><a href="#1-Gromacs笔记整理" class="headerlink" title="1.Gromacs笔记整理"></a>1.Gromacs笔记整理</h2><h3 id="1-1-安装篇"><a href="#1-1-安装篇" class="headerlink" title="1.1.安装篇"></a>1.1.安装篇</h3><p><a href="http://kangsgo.com/31.html">Gromacs5.0+详细安装</a></p><p><a href="http://kangsgo.com/577.html">Gromacs CUDA版一键安装脚本</a></p><h3 id="1-2-完整教程"><a href="#1-2-完整教程" class="headerlink" title="1.2.完整教程"></a>1.2.完整教程</h3><p><a href="http://kangsgo.com/670.html">GROMACS之水中部分載脂蛋白</a></p><p><a href="http://kangsgo.com/681.html">LigParGen:配体OPLS/CM1A力场在线生成</a></p><p><a href="http://kangsgo.com/94.html">gromacs下蛋白-配体复合物模拟[GAFF]</a></p><p><a href="http://kangsgo.com/13.html">gromacs中构建非标准氨基酸残基力场</a></p><p><a href="http://kangsgo.com/156.html">gromacs下蛋白配体复合物分析</a></p><p><a href="http://kangsgo.com/694.html">Gromacs 5.1.2做拉伸动力学的几点笔记</a></p><h3 id="1-3-小技巧合集"><a href="#1-3-小技巧合集" class="headerlink" title="1.3.小技巧合集"></a>1.3.小技巧合集</h3><p><a href="http://kangsgo.com/106.html">Gromacs共轭梯度法mdp设置</a></p><h2 id="2-Rosetta笔记整理"><a href="#2-Rosetta笔记整理" class="headerlink" title="2.Rosetta笔记整理"></a>2.Rosetta笔记整理</h2><h3 id="2-1-安装篇"><a href="#2-1-安装篇" class="headerlink" title="2.1.安装篇"></a>2.1.安装篇</h3><h3 id="2-2-完整教程"><a href="#2-2-完整教程" class="headerlink" title="2.2.完整教程"></a>2.2.完整教程</h3><p><a href="http://kangsgo.com/647.html">Rosetta蛋白蛋白对接</a><br><a href="http://kangsgo.com/657.html">Rosetta从头结构预测</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Gromacs笔记整理&quot;&gt;&lt;a href=&quot;#1-Gromacs笔记整理&quot; class=&quot;headerlink&quot; title=&quot;1.Gromacs笔记整理&quot;&gt;&lt;/a&gt;1.Gromacs笔记整理&lt;/h2&gt;&lt;h3 id=&quot;1-1-安装篇&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gromacs中构建非标准氨基酸残基力场</title>
    <link href="http://kangsgo.com/13.html"/>
    <id>http://kangsgo.com/13.html</id>
    <published>2017-12-09T12:33:22.302Z</published>
    <updated>2017-12-09T12:33:22.304Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lilab.ecust.edu.cn/pharmmapper" target="_blank" rel="external">Pharmmapper</a>算是一个非常知名的由华东理工大学开发与维护的药效团匹配与潜在识别靶标平台，开始以为对自己的课题很有用，但是仔细研究发现可能自己的课题用不上，所以没有阅读其文献，在这里分享给大家可能算是一个<strong>初窥</strong>吧。</p><p><strong>如果你需要经常使用这个在线服务，强烈建议通读原理和算法，这样计算的结果才更加真实更加正确！！！</strong></p><p>该服务的用途我理解为主要是通过已知的小分子化合物，去寻找其可能作用的靶点的过程。俗称钓靶。</p><p>药物靶点鉴定包括许多算法来寻找基因和蛋白质。当靶标的三维结构可以使用，寻靶的过程就变为在候选靶标和小分子之间的联系模式的寻找。其中一类以分子对接为代表，另外一类就是Pharmmapper这种空间特征排列搜寻，其本质上也是小分子和特异靶点受体之间的相互作用分析。PharmMapper来自TargetBank, DrugBank, BindingDB 和 PDTD这几个数据库，超过7000个受体基础的药效团模型。包含1627个药物信息和459个人类蛋白靶标。</p><p>详细信息可以从<a href="http://lilab.ecust.edu.cn/pharmmapper/help.php" target="_blank" rel="external">这里</a>获取帮助。在这里简单介绍一下：</p><h3 id="流程介绍"><a href="#流程介绍" class="headerlink" title="流程介绍"></a>流程介绍</h3><h4 id="1-提交"><a href="#1-提交" class="headerlink" title="1.提交"></a>1.提交</h4><p>提交的分子需要为MOL2格式或者SDF格式。如果不是三维构象的分子，那么服务会自动转化为三维构象。</p><h4 id="2-基本设置"><a href="#2-基本设置" class="headerlink" title="2.基本设置"></a>2.基本设置</h4><p><strong>Generate Conformers</strong></p><p>PharmMapper采用半经验药效团图谱工具，其需要生成多个分子构象，用户可以采用在线的方法生成或者自己准备（离线的方法）。在线方法PharmMapper采用的是MOEA基础的构象生成算法<em>Cyndi</em>，离线自己准备的话将所有的结果放入一个MOL2文件提交。</p><p><strong>Maximum Generated Conformations</strong></p><p><em>Cyndi</em>生成的最大构象</p><p><strong>Number of Objectives used in MOEA</strong></p><p>在<em>Cyndi</em>的多目标进化算法中使用的目标数目</p><p><strong>Select Targets Set</strong></p><p>主要包含2010和2017两个数据库集。</p><p><strong>Perform GA Match</strong><br>使用遗传算法（AutoDock大家还有没有印象^_^）优化药效团图谱</p><p><strong>Number of Reserved Matched Targets</strong><br>生成潜在靶标数量</p><h3 id="结果介绍"><a href="#结果介绍" class="headerlink" title="结果介绍"></a>结果介绍</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/12/PharmMapper-1.png" alt="图1" title="">                </div>                <div class="image-caption">图1</div>            </figure><p>图1：PharmMapper交互界面<br>(A).PharmMapper靶标数据集<br>(B).命中靶标模型排序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/12/PharmMapper-2.png" alt="图2" title="">                </div>                <div class="image-caption">图2</div>            </figure><p>图2:Kanamycin对于 Aminoglycoside 2-phosphotransferase IVa (PDB ID: 3SG9)靶标<br>(A).Kanamycin和其药效团<br>(B).Kanamycin以及周围的药效团分子，在药效团中，紫色的球表示氢键受体中心，绿色的球表示氢键供体中心，淡蓝色的球表示疏水中心</p><p>参考文献:</p><p>Xiaofeng Liu, Sisheng Ouyang, Biao Yu, Kai Huang, Yabo Liu, Jiayu Gong, Sisuan Zheng, Zhihua Li, Honglin Li, Hualiang Jiang. PharmMapper Server: a web server for potential drug target identification via pharmacophore mapping approach. Nucleic Acids Res., 2010, 38, W609-W614.</p><p>Xia Wang, Chenxu Pan, Jiayu Gong, Xiaofeng Liu, Honglin Li. Enhancing the Enrichment of Pharmacophore-Based Target Prediction for the Polypharmacological Profiles of Drugs. J. Chem. Inf. Model., 2016, 56, 1175-1183.</p><p>Xia Wang, Yihang Shen, Shiwei Wang, Shiliang Li, Weilin Zhang, Xiaofeng Liu, Luhua Lai, Jianfeng Pei, Honglin Li. PharmMapper 2017 update: a web server for potential drug target identification with a comprehensive target pharmacophore database. Nucleic Acids Res., 2017, 45, W356-W360.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://lilab.ecust.edu.cn/pharmmapper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pharmmapper&lt;/a&gt;算是一个非常知名的由华东理工大学开发与维护的药效团匹配与潜在识别靶标平台，开始以为对自
      
    
    </summary>
    
      <category term="分子模拟" scheme="http://kangsgo.com/categories/%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>mahotas进行细胞统计开胃菜</title>
    <link href="http://kangsgo.com/9.html"/>
    <id>http://kangsgo.com/9.html</id>
    <published>2017-11-27T04:27:23.000Z</published>
    <updated>2017-12-01T11:02:28.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-图像教程"><a href="#Python-图像教程" class="headerlink" title="Python 图像教程"></a>Python 图像教程</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="需要用到的软件"><a href="#需要用到的软件" class="headerlink" title="需要用到的软件"></a>需要用到的软件</h4><ul><li>Python 3+</li><li>numpy</li><li>matplotlib</li><li>mahotas</li><li>ipython&amp;notebook</li></ul><h2 id="第一个项目-计算细胞核"><a href="#第一个项目-计算细胞核" class="headerlink" title="第一个项目:计算细胞核"></a>第一个项目:计算细胞核</h2><p>我们的第一个任务是进行细胞核的计算，你可以点击图像进行下载到本地跟着进行运行<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/dna.jpeg" alt="1" title="">                </div>                <div class="image-caption">1</div>            </figure><br>首先导入包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> mahotas <span class="keyword">as</span> mh</div></pre></td></tr></table></figure><p>对于Python，有能够通过包来完成许多工具，而不是一个包。我们用numpy数组进行储存图像，在我们的案例中，其是一个二维数组（高X宽），或者，对于彩色图像，为三维数组（高X宽X3或者高X宽X4，其中3和4分别表示red，green，blue或者red，green，blue，alpha的元组，其中alpha为透明度）<br>首先我们读取图像进入内存:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dna=mh.imread(<span class="string">'dna.jpeg'</span>)</div></pre></td></tr></table></figure><h3 id="玩弄"><a href="#玩弄" class="headerlink" title="玩弄"></a>玩弄</h3><p>在交互模式，例如ipython，你可以查看使用如下方法查看图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plt.imshow(dna)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/output_6_0.png" alt="png" title="">                </div>                <div class="image-caption">png</div>            </figure><p>你可能惊讶图片并不像原来的图片是黑色的，原因是plt默认展示的为jet()  bar，你可以通过切换colormap来切换成默认的灰度图，例如如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plt.imshow(dna)</div><div class="line">plt.gray()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/output_8_0.png" alt="png" title="">                </div>                <div class="image-caption">png</div>            </figure><p>你还可以探索如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print(dna.shape)</div><div class="line">print(dna.dtype)</div><div class="line">print(dna.max())</div><div class="line">print(dna.min())</div></pre></td></tr></table></figure><pre><code>(1024, 1344)uint82520</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plt.imshow(dna // <span class="number">2</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/output_11_0.png" alt="png" title="">                </div>                <div class="image-caption">png</div>            </figure><p>我们将图片所有性质除以2，然而得到的结果居然一样，实际上plt在展示图片之前会进行对比扩展</p><h3 id="一些实际的工作"><a href="#一些实际的工作" class="headerlink" title="一些实际的工作"></a>一些实际的工作</h3><p>现在我们开始实际的计算核酸的工作，我们对开篇导入的图片的物体（objects）进行计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">T=mh.thresholding.otsu(dna)</div><div class="line">plt.imshow(dna&gt;T)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/output_13_0.png" alt="png" title="">                </div>                <div class="image-caption">png</div>            </figure><p>在这里，我们又一次利用了dna是一个numpy数组，并在逻辑运算中使用它（dna&gt; T）的事实。 结果是一个布尔值的数组，这个pylab显示为一个黑白图像。<br>但是看起来不是那么美好，因为图像包含了许多小的物体。这里有两个方法解决它。一个简单的方法是使用Gaussian筛选抚平小的物体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dnaf = mh.gaussian_filter(dna, <span class="number">8</span>).astype(<span class="string">'uint8'</span>)</div><div class="line">T = mh.thresholding.otsu(dnaf)</div><div class="line">plt.imshow(dnaf&gt;T)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/output_15_0.png" alt="png" title="">                </div>                <div class="image-caption">png</div>            </figure><p><code>mh.gaussian_filter</code>接收图像并过滤器的标准偏差(以像素为单位)并返回过滤后的图像，但是一个更好的方法是使用mahotas筛选图像并且计算阈值，使用numpy操作创建的图像，并用plt展示他们，但是所有的工作都是数组完成的，这样的结果会更好。</p><p>我们现在进行一些细胞核的merged。 最后的计数只是一个额外的函数调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">labeled,nr_objects=mh.label(dnaf&gt;T)</div><div class="line">print(nr_objects)</div><div class="line">plt.imshow(labeled)</div><div class="line">plt.jet()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><pre><code>18</code></pre><p><img src="/images/2017/11/output_18_1.png" alt="png"></p><p>我们拥有物体的图像为18个，展示的为标记的（labeled）图像，使用jet()进行着色<br>我们可以探索标记的物体，其是一个整数的数组，它的值是该位置上对象的标签，所以值的范围从0（背景）到nr_objects。</p><h2 id="第二个项目-分隔图像"><a href="#第二个项目-分隔图像" class="headerlink" title="第二个项目:分隔图像"></a>第二个项目:分隔图像</h2><p>通过第一个项目，我们完成的还是令人满意，但是仍然有一些核酸是黏在一起的，然我们to do better<br>这里有一个简单的，传统的想法:</p><ol><li>平滑图像</li><li>寻找区域最大值</li><li>使用区域最大值作为watershed的种子</li></ol><h3 id="寻找种子"><a href="#寻找种子" class="headerlink" title="寻找种子"></a>寻找种子</h3><p>但是且慢，有一些细胞在照片上重叠了，被我们算作一个细胞了。显然是这不科学的，因此我们需要更精确的计算方法。接下来我们要讨论的方法寻找团块的中心点并计算中心点的个数。这里我们假设在灰度图上，团块比较中心的地方比较亮，最亮的地方就是最中心的地方。这个东西叫regional maxima，相当于一片山脉中的最高峰。我们找到这个点之后，进行标亮，并且与原来的灰度图重叠在一起。首先我们进行如下的尝试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#plt.figure(figsize=(15,15))</span></div><div class="line">dnaf=mh.gaussian_filter(dna,<span class="number">8</span>).astype(<span class="string">'uint8'</span>)</div><div class="line">rmax=mh.regmax(dnaf)</div><div class="line">plt.imshow(mh.overlay(dna,rmax))</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/output_20_0.png" alt="png" title="">                </div>                <div class="image-caption">png</div>            </figure><p><code>mh.overlay()</code>返回一个彩色图像，第一个参数给出灰度级分量，而第二个参数作为红色通道。 结果看起来不太好：<br>稍微摆弄一下后，我们决定用一个更大的sigma尝试相同的想法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</div><div class="line">dnaf=mh.gaussian_filter(dna,<span class="number">15</span>).astype(<span class="string">'uint8'</span>)</div><div class="line">rmax=mh.regmax(dnaf)</div><div class="line">plt.imshow(mh.overlay(dna,rmax))</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/output_22_0.png" alt="png" title="">                </div>                <div class="image-caption">png</div>            </figure><p>看起来好许多，我们可以方便的统计核算数量了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">seeds,nr_nuclei=mh.label(rmax)</div><div class="line">print(nr_nuclei)</div></pre></td></tr></table></figure><pre><code>22</code></pre><h3 id="Watershed"><a href="#Watershed" class="headerlink" title="Watershed"></a>Watershed</h3><p>我们打算将Watershed应用于阈值图像的距离变换(使用矩阵最大值减去矩阵内所有元素，使得矩阵元素的数值原来大的变小，小的变大,得到下图)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">T=mh.thresholding.otsu(dnaf)</div><div class="line">dist =  mh.distance(dnaf&gt;T)</div><div class="line">dist =  dist.max()-dist</div><div class="line">dist -= dist.min()</div><div class="line">dist  = dist/float(dist.ptp())*<span class="number">255</span></div><div class="line">dist  = dist.astype(np.uint8)</div><div class="line">plt.imshow(dist)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/output_26_0.png" alt="png" title="">                </div>                <div class="image-caption">png</div>            </figure><p>现在，根据矩阵的元素的大小，以之前得到的一堆最高峰（seeds）为核心位置，观察每个核心与邻居核心之间的边界（元素数值的局域极大值），把这个边界标记出来。就得到了核心的区域划分图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nuclei=mh.cwatershed(dist,seeds)</div><div class="line">plt.imshow(nuclei)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/output_27_0.png" alt="png" title="">                </div>                <div class="image-caption">png</div>            </figure><p>参考资料:<br><a href="http://pythonvision.org/basic-tutorial/" target="_blank" rel="external">原文</a><br><a href="http://wiki.swarma.net/index.php?title=%E4%BD%BF%E7%94%A8python%E5%81%9A%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86&amp;variant=zh" target="_blank" rel="external">使用python做图像处理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python-图像教程&quot;&gt;&lt;a href=&quot;#Python-图像教程&quot; class=&quot;headerlink&quot; title=&quot;Python 图像教程&quot;&gt;&lt;/a&gt;Python 图像教程&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;head
      
    
    </summary>
    
      <category term="绘图与可视化" scheme="http://kangsgo.com/categories/%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="mahotas" scheme="http://kangsgo.com/tags/mahotas/"/>
    
  </entry>
  
  <entry>
    <title>mahotas安装教程</title>
    <link href="http://kangsgo.com/8.html"/>
    <id>http://kangsgo.com/8.html</id>
    <published>2017-11-25T16:38:23.000Z</published>
    <updated>2017-11-25T16:56:10.346Z</updated>
    
    <content type="html"><![CDATA[<p>hi!各位好久不见，小伙伴们的科研道路是否顺利。<br>我的导师告诉我要讲好故事，才能让人觉得生动有趣，所以我今天想用另外一种方式和大家分享今天发现的一个<strong>大</strong>玩意儿</p><p>故事的开始是我有一张图片，想计算图片里东西的长宽，如果一个一个数，一个个比，那太费劲了，所以就百度了一下，看一下有什么办法解决没有，然后谷歌到了一个python处理细胞细胞核的工具，觉得自己应该能够用的上（后面和大家分享），进一步挖掘发现他是用的<a href="https://github.com/luispedro/mahotas" target="_blank" rel="external">mathotas</a>这个包。</p><p>进一步进入github上发现其作者是如下光头男(luispedro):<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/lpc2013-small.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>luispedro是一个计算生物科学家（小伙伴们看到这里是否两眼发光），其原来是利用宏基因组分析微生物群体，对其机器学习和数学等打下了非常坚实的基础，现在主要是利用生物图像信息学进行<a href="https://en.wikipedia.org/wiki/Bioimage_informatics" target="_blank" rel="external">细胞亚定位分析</a>，现在其工作于<a href="http://murphylab.web.cmu.edu/" target="_blank" rel="external">Murphy Lab</a></p><p>所以小伙伴们有细胞等图像处理的时候可以关注一下这个包，我在后期也会分享一些包的应用给大家。今天仅仅简答介绍一下。</p><p>Mahotas 是一个快速的视觉算法的Python包，其主要是用C++写成，速度甚至超过了numpy数组计算操作。</p><p>现在有如下算法:</p><ul><li>watershed</li><li>convex points calculation</li><li>hit &amp; miss, thinning</li><li>Zernike &amp; Haralick, LBP, and TAS features</li><li>Speeded-Up Robust Features(SURF), a form of local features.</li><li>thresholding</li><li>convolution</li><li>Sobel edge detection</li><li>spline interpolation</li><li>SLIC super pixes</li></ul><p>现在Mahotas有超过100种的图像程序处理功能和计算机视觉功能，且现在还在增加。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>言归正传我，我们简单介绍一下安装方法，最简单的安装方法就是使用conda安装，其中conda加强包（conda-forge）具有mahots<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</div><div class="line">conda install mahotas</div></pre></td></tr></table></figure></p><p>其他方法包括pip安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install mahotas</div></pre></td></tr></table></figure></p><p>windows 还可以进行包安装，地址为:<br><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p>不过还是建议用conda安装，是否安装成功仅需要<code>import mahotas as mh</code>导入一下看一下是否报错即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hi!各位好久不见，小伙伴们的科研道路是否顺利。&lt;br&gt;我的导师告诉我要讲好故事，才能让人觉得生动有趣，所以我今天想用另外一种方式和大家分享今天发现的一个&lt;strong&gt;大&lt;/strong&gt;玩意儿&lt;/p&gt;
&lt;p&gt;故事的开始是我有一张图片，想计算图片里东西的长宽，如果一个一个
      
    
    </summary>
    
      <category term="绘图与可视化" scheme="http://kangsgo.com/categories/%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="mahotas" scheme="http://kangsgo.com/tags/mahotas/"/>
    
  </entry>
  
  <entry>
    <title>利用Pymol将周边图像虚化</title>
    <link href="http://kangsgo.com/7.html"/>
    <id>http://kangsgo.com/7.html</id>
    <published>2017-11-16T12:09:30.000Z</published>
    <updated>2017-11-16T12:09:45.494Z</updated>
    
    <content type="html"><![CDATA[<p><code>FocalBlur</code>是一个Pymol脚本可以创建非常cool的图像，将周边的的图像虚化，更加突出中心的object。<br>虚化图片如下:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/FocalBlur1.png" alt="图片1" title="">                </div>                <div class="image-caption">图片1</div>            </figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先加载<a href="https://github.com/Pymol-Scripts/Pymol-script-repo/raw/master/focal_blur.py" target="_blank" rel="external">FocalBlur</a>脚本:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run focal_blur.py</div></pre></td></tr></table></figure></p><p>然后在pymol中进行使用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FocalBlur aperture=<span class="number">2.0</span>,samples=<span class="number">20</span>,ray=<span class="number">1</span></div></pre></td></tr></table></figure></p><p>如果是python脚本运用的话那么:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FocalBlur(aperture=<span class="number">2.0</span>,samples=<span class="number">20</span>,ray=<span class="number">1</span>)</div></pre></td></tr></table></figure></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>当时使用镭射(raytracing)，图像创建的时间将会变得更长，具体的时间和采样n设置的大小有关</li><li>aperture为相机孔隙，值越大越模糊</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/FocalBlur2.png" alt="图片2" title="">                </div>                <div class="image-caption">图片2</div>            </figure><p>FocalBlur aperture=1,samples=100,ray=1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/FocalBlur3.png" alt="图片3" title="">                </div>                <div class="image-caption">图片3</div>            </figure><p>FocalBlur aperture=2,samples=100,ray=1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/FocalBlur4.png" alt="图片4" title="">                </div>                <div class="image-caption">图片4</div>            </figure><p>FocalBlur aperture=4,samples=400,ray=1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/FocalBlur5.png" alt="图片5" title="">                </div>                <div class="image-caption">图片5</div>            </figure><p>FocalBlur aperture=4,samples=400,ray=0</p><p>非常简单直观</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;FocalBlur&lt;/code&gt;是一个Pymol脚本可以创建非常cool的图像，将周边的的图像虚化，更加突出中心的object。&lt;br&gt;虚化图片如下:&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div c
      
    
    </summary>
    
      <category term="绘图与可视化" scheme="http://kangsgo.com/categories/%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="Pymol" scheme="http://kangsgo.com/tags/Pymol/"/>
    
  </entry>
  
  <entry>
    <title>使用python得到TCGA表格</title>
    <link href="http://kangsgo.com/6.html"/>
    <id>http://kangsgo.com/6.html</id>
    <published>2017-11-14T01:53:21.000Z</published>
    <updated>2017-11-14T02:17:38.013Z</updated>
    
    <content type="html"><![CDATA[<p>我们需要提取下面的表格到本地，具体图片如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/11/tcga1.png" alt="图片1" title="">                </div>                <div class="image-caption">图片1</div>            </figure><p>我们首先先点击表格右上角的JSON下载为JSON格式(假设保存的为<code>data.json</code>格式)，打开可以发现其数据与表格上的数据是有差别的，我们用如下代码进行处理:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf-8-*-</span></div><div class="line"><span class="comment"># author:kangsgo</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">model=&#123;&#125;</div><div class="line"><span class="comment">#解码json</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> json_file:</div><div class="line">    model=json.load(json_file)</div><div class="line"></div><div class="line"><span class="comment">#写入到data.csv文件中</span></div><div class="line">f=open(<span class="string">'data.csv'</span>,<span class="string">'w'</span>)</div><div class="line">count=<span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> model:</div><div class="line">    a=[]</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i[<span class="string">'consequence'</span>]:</div><div class="line">        a.append(j[<span class="string">'transcript'</span>][<span class="string">'aa_change'</span>])</div><div class="line">    a=list(set(a))</div><div class="line">    f.write(i[<span class="string">'genomic_dna_change'</span>]+<span class="string">';'</span>+i[<span class="string">'ssm_id'</span>]+<span class="string">';'</span>+i[<span class="string">'mutation_subtype'</span>]+<span class="string">';'</span> \</div><div class="line">       +str(len(a))+<span class="string">'/567'</span>+<span class="string">';'</span>+str(len(i[<span class="string">'consequence'</span>]))+<span class="string">'/10188'</span>)</div><div class="line">    f.write(<span class="string">'\n'</span>)</div><div class="line">    count += <span class="number">1</span></div><div class="line">f.close()</div></pre></td></tr></table></figure></p><p>将会得到<code>data.csv</code>的csv文件，可以用excel等工具进一步处理分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们需要提取下面的表格到本地，具体图片如下:&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overl
      
    
    </summary>
    
      <category term="Python" scheme="http://kangsgo.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>SMINA教程以CDPK1为例</title>
    <link href="http://kangsgo.com/5.html"/>
    <id>http://kangsgo.com/5.html</id>
    <published>2017-11-08T07:04:21.000Z</published>
    <updated>2017-11-12T06:29:44.946Z</updated>
    
    <content type="html"><![CDATA[<p>SMINA教程以CDPK1为例</p><p>原作者:David Ryan Koes<br>翻译:康文渊</p><p>若进行精读建议查看原文以及参考文献，本文是我根据教程快速阅读做的笔记</p><blockquote><p>Q1:我们有autodock vina，为什么还要SMINA？</p><p>A1:SMINA有更加优秀的速度和更加的扩展性</p><p>Q2:用该对接软件有什么优势？</p><p>A2:首先该对接软件为免费/学术免费软件，其次其有非常良好的对接准确度，甚至在商业软件中都为上乘，同时可以很好的运用SMINA进行得分改造，进一步提升性能和速度</p></blockquote><p>本教程是一个使用SMINA进行对<em>E.tenella</em>中的钙依赖性蛋白激酶1(calcium-dependent protein kinase 1 CDPK1)进行的结构为基础的虚拟筛选的教程。<em>E.tenella</em>是一种感染幼禽并且导致潜在致命球虫病的寄生虫。尽管这种酶并未解析晶体结构（译者翻译时该结构已经被解析，pdb:4YSJ），但是有相关寄生虫的该种酶的结构。<em>C. parvum</em> 和 <em>T. gondii</em>的该种酶结构已经被解析，并且有生物活性数据表明他们的小分子竭抗剂。<br>我们将会对怎么分析已知结构，评价SMINA对于这些结构的表现，对于对接结果创建自定义的得分函数，使用SWISS-MODEL创建<em>E.tenella</em>的结构模型，并且进行<em>E.tenella</em>CDPK1的虚拟筛选。（个人认为作者提到的<em>E.tenella</em>均表示的为<em>E.tenella</em>CDPK1）。</p><h2 id="假设和惯例"><a href="#假设和惯例" class="headerlink" title="假设和惯例"></a>假设和惯例</h2><p>假设读者对Linux命令行有一定的了解，并对一些用到的软件熟悉。教程在Ubuntu Linux12.04（原作者）和Ubuntu Linux16.04（译者）测试通过。bash命令行如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"Hello"</span></div></pre></td></tr></table></figure></p><p>python基础的PyMOL环境展示如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#python2.x</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Hello"</span></div></pre></td></tr></table></figure></p><p>以下为（译者）用到的软件:<br>|–Software–|–License–|–Source–|<br>|—|—|—|<br>|<a href="/images/2017/smina/color_by_mutation.py">color_by_mutation</a>|GNU|<a href="http://www.pymolwiki.org/index.php/Color_By_Mutations|" target="_blank" rel="external">http://www.pymolwiki.org/index.php/Color_By_Mutations|</a><br>|PyMOL 1.7.x|Python|<a href="http://sourceforge.net/projects/pymol/|" target="_blank" rel="external">http://sourceforge.net/projects/pymol/|</a><br>|RDKit 2017_03|BSD Style|<a href="http://rdkit.org/|" target="_blank" rel="external">http://rdkit.org/|</a><br>|smina|GPLv2|<a href="http://sourceforge.net/projects/smina/|" target="_blank" rel="external">http://sourceforge.net/projects/smina/|</a></p><h1 id="1-检查C-parvum和T-gondii晶体结构"><a href="#1-检查C-parvum和T-gondii晶体结构" class="headerlink" title="1. 检查C.parvum和T.gondii晶体结构"></a>1. 检查<em>C.parvum</em>和<em>T.gondii</em>晶体结构</h1><p>该部分内容可以参考早期博客文章同源建模系列<br>首先我们分析<em>E.tenella</em>序列和验证三个结构的异同（三个寄生虫中改结构）。然后我们使用<em>C.parvum</em>和<em>T.gondii</em>创建一个虚拟筛选的测试集，并且对接这些测试集化合物。我们使用这些对接结果来进行晶体结构的筛选和模型的增加。</p><h2 id="1-1-靶标分析"><a href="#1-1-靶标分析" class="headerlink" title="1.1 靶标分析"></a>1.1 靶标分析</h2><p>首先，我们分析<em>E.tenella</em>序列和<em>C.parvum</em>和<em>T.gondii*</em>结构</p><h3 id="1-1-1-E-tenella序列分析"><a href="#1-1-1-E-tenella序列分析" class="headerlink" title="1.1.1 E.tenella序列分析"></a>1.1.1 <em>E.tenella</em>序列分析</h3><p>1.复制或者下载<em>E.tenella</em>的FASTA序列,你可以点击<a href="http://www.ncbi.nlm.nih.gov/protein/CAA96439" target="_blank" rel="external">这里</a>进入网址,同样也可以<a href="/images/2017/smina/CDPK1.fasta">下载</a>我们已经下载好的。</p><p>2.进行BLAST搜索，若你为进入的网址，可以直接点击ncbi右侧的BLAST进行搜寻（如下图）。若为下载的文件可以进入<a href="http://blast.ncbi.nlm.nih.gov/Blast.cgi?PROGRAM=blastp" target="_blank" rel="external">BLAST页面</a>上传fasta文件进行搜寻。<br>   <img src="/images/2017/smina/SMINA1.png" alt="图1"></p><p>3.进入页面。</p><p>   <img src="/images/2017/smina/SMINA2.png" alt="图2"><br>4.点击<strong>BLAST</strong>。</p><p>5.结果如图3,可以发现得分最高的为已经解析的结构，相似度为99%，但是我们在这里假装没有。排第二的为Neospora Caninum（4M97），但是更加相近的为<em>T.gondii</em>的几个结构（4M7N，3KU2,<a href="/images/2017/smina/3i79.pdb">3I79</a>,3HX4,3I7C），相似度大于80%。<em>C.parvum</em>的首次命中（3IGO）相似度为62%。</p><p>   <img src="/images/2017/smina/SMINA3.png" alt="图3"></p><p>从中我们得出的结论为<em>T.gondii</em>的CDPK1相比于<em>C.parvum</em>具有更高的相似度。建议<em>T.gondii</em>结构选为同源建模的模板更为合理。</p><h3 id="1-1-2-结构分析"><a href="#1-1-2-结构分析" class="headerlink" title="1.1.2 结构分析"></a>1.1.2 结构分析</h3><p>为了鉴定<em>T.gondii</em>和<em>E.tenella</em>之间CDPK1结合位点的差别，我们创建了一个<em>E.tenella</em>同源模型。并且使用<a href="/images/2017/smina/color_by_mutation.py">color_by_mutation</a>和PyMOL进行结构可视化序列的不同。<br>1.在<a href="http://swissmodel.expasy.org/" target="_blank" rel="external">SWISS-MODEL</a>进行自动建模，你也可以参考之前的教程 </p><blockquote><p>译者注：我认为该方法并不是建模的最佳方法，最佳方法为找到具有共同抑制剂的晶体结构进行基于配体的多模板建模，这样可以保证重要的活性腔的相似，而不是使用没有结合配体的晶体结构进行建模。</p></blockquote><p>2.输入<em>E.tenella</em>的FASTA序列和3I79进行建模（图4）</p><p>  <img src="/images/2017/smina/SMINA4.png" alt="图4"></p><p>3.下载结果文件，你可以在这里<a href="/images/2017/smina/swissmodel.pdb">下载</a>我已经建模好的。</p><p>4.在PyMOL中加载模型，3I79和3NCG</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">load swissmodel.pdb</div><div class="line">fetch <span class="number">3</span>I79</div><div class="line">fetch <span class="number">3</span>NCG</div></pre></td></tr></table></figure><blockquote><p>译者注：在这里<code>3NCG</code>来的有点突然，搜索一下可以发现3NCG为<em>C.parvum</em>的激活状态下的晶体结构</p></blockquote><p>5.比对结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alignto</div></pre></td></tr></table></figure><p>6.从3NCG中提取BK1配体，并且隐藏该pdb的其余结构，因为3I79为非结合状态，我们使用这个配体来占有结合位点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">extract bk1,resn BK1</div><div class="line">hide (/<span class="number">3</span>NCG/)</div></pre></td></tr></table></figure><p>7.探索模型和3I79结合位点周围的残基，值得注意的是SWISS-MODEL忠实的复制了侧链构像。</p><p>8.着色两者之间的突变位点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">run color\_by\_mutation.py</div><div class="line">color\_by\_mutation swissmodel,<span class="number">3</span>i79</div></pre></td></tr></table></figure><p>9.探索结合位点，注意的是3I79中GLY128在<em>E.tenella</em>模型中被突变为THR 108，其余在结合位点是大体不变的。</p><p>  <img src="/images/2017/smina/SMINA5.png" alt="图5"></p><p>10.重复分析3NCG，可以发现<em>C.parvum</em>在结合位点附近具有更多的突变</p><h2 id="1-2-测试集的创建"><a href="#1-2-测试集的创建" class="headerlink" title="1.2 测试集的创建"></a>1.2 测试集的创建</h2><p>PubChem上有<em>T.gondii</em>和<em>C.parvum</em>的CDPK1诘抗击。我们使用这些数据作为虚拟筛选的测试集对这两个靶标进行筛选.</p><h3 id="1-2-1组装活性化合物"><a href="#1-2-1组装活性化合物" class="headerlink" title="1.2.1组装活性化合物"></a>1.2.1组装活性化合物</h3><p>(a)在<a href="http://pubchem.ncbi.nlm.nih.gov" target="_blank" rel="external">PubChem</a>搜索CDPK1然后排序活性化合物,每个靶点选择三个最大的化合物数据集,为了保证和教程一致,我们选择的为和原教程相同的数据集.<br>    <em>T.gondii</em><br>    aid:677062,600378,672956<br>    <em>C.parvum</em><br>    aid:600379,672955,66097</p><p>(b)选择active,然后点击Structures下载,之后选择没有压缩的SMILES格式,可以点此<a href="/images/2017/smina/SMINA.tar.gz">下载</a>我们下载好的</p><p>(c)修正SMILES结构。下载的SMILES文件字符串和标题顺序相反。另外，我们需要去除salt，并将关键字“active”添加到所有活性化合物的标题中。我们每个文献执行如下命令（例如aid677062.txt为例）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'&#123;print $2,$1"_active"&#125;'</span> aid677062.txt | sed <span class="string">'s/\.Cl//'</span> &gt; aid677062.smi</div></pre></td></tr></table></figure></p><p>awk主要是进行了前后的颠倒，并且在标题后增加active标签，sed主要是将Cl进行替换，替换成空，中间用管道链接，输出到smi文件格式。</p><p>(d)将每个靶点的内容合并为单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat aid*.smi &gt; activaes.msi</div></pre></td></tr></table></figure><p><em>T.gondii</em>和<em>C.pavum</em>分别包含156个和89个活性化合物。你可以在这里<a href="/images/2017/smina/SMINA2.tar.gz">下载</a>合并好的文件。</p><h3 id="1-2-2-创建诱饵数据集"><a href="#1-2-2-创建诱饵数据集" class="headerlink" title="1.2.2 创建诱饵数据集"></a>1.2.2 创建诱饵数据集</h3><p>   <strong>该在线网站说只需要10min，实际上需要1-2天左右时间</strong><br>   由于这些靶点的无活性配体数量较少，我们使用诱饵数据库Database of Useful Decoys：Enhanced（DUDE）方法来从ZINC数据库中进行采样。这些诱饵被选择的方法为化学性质不相同（即和有活性的配体相比较不相似，认为是不结合的）。但分子质量，logP，旋转键和氢键受体供体这些简单的分子参数是相同的。</p><p>(a)使用<a href="http://dude.docking.org/generate" target="_blank" rel="external">DUDE</a>网站创建诱饵数据集,将会生成dude-decoys.tar.gz文件，里面包含50个参数匹配的诱饵。</p><p>(b)将诱饵结合进入单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat decoys/* | grep -v ligand &gt; decoys.msi</div></pre></td></tr></table></figure><p>点此<a href="/images/2017/smina/SMINA3.tar.gz">下载</a>decoys文件，(<em>T.gondii</em>诱饵和活性化合物。<em>C.pavum</em>诱饵和活性化合物)。</p><h3 id="1-2-3-生成三维结构"><a href="#1-2-3-生成三维结构" class="headerlink" title="1.2.3 生成三维结构"></a>1.2.3 生成三维结构</h3><p>  我们将使用开源软件RDKit利用2D SMILES生成3D构像</p><p>(a)将RDKit写入你的PYTHONPATH，并且执行<a href="/images/2017/smina/rdconf.py">rdconf.py</a>脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://bits.csb.pitt.edu/tdtCDPK1/rdconf.py</div><div class="line">chmod + x rdconf.py</div></pre></td></tr></table></figure><p>(b)每个active/decoy生成单一构像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rdconf.py --maxconfs 1 decoys.smi decoys.sdf</div><div class="line">rdconf.py --maxconfs 1 actives.smi actives.sdf</div></pre></td></tr></table></figure><p>(c)将文件合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat actives.sdf decoys.sdf &gt; combined.sdf</div></pre></td></tr></table></figure><blockquote><p>由于有两个文件，我们将<em>T.gondii</em>和<em>C.pavum</em>分别命令为gondii.sdf和parvum.sdf</p></blockquote><h2 id="1-3-对接"><a href="#1-3-对接" class="headerlink" title="1.3 对接"></a>1.3 对接</h2><p>我们使用SMINA通过对接化合物进入受体结构进行虚拟筛选,采用AutoDock Vina得分功能。由于我们对一个固定的受体对接，所以我们选择一个好的受体结构是非常重要的。我们将会使用CDPK1的测试集来模拟评价我们的对接工具和选择受体结构。</p><p>1.鉴定PDB中所有<em>C.parvum</em>和<em>T.gondii</em>文件，搜索’calcium-dependent protein kinase 1’,并且选择恰当的生物（organism.）</p><p>  <em>C. parvum</em>: 2QG5 2WEI 3DFA 3F3Z 3HKO 3IGO 3L19 3LIJ 3MWU 3NCG</p><p>  <em>T. gondii</em>: 3I79 3I7B 3I7C 3KU2 3N51 3NYV 3SX9 3SXF 3T3U 3T3V 3UPX 3UPZ 3V51 3V5P 3V5T 4M84</p><blockquote><p>由于教程较老，故和自己搜索有差异</p></blockquote><p>2.下载这些pdb文件,你可以用如下的简单方法，或者直接<a href="/images/2017/smina/SMINA4.tar.gz">下载</a>我下载好的。</p><p>将以下代码保存为脚本，例如<code>down.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash  </span></div><div class="line">  </div><div class="line">str=<span class="string">"2QG5 2WEI 3DFA 3F3Z 3HKO 3IGO 3L19 3LIJ 3MWU 3NCG"</span>  </div><div class="line">arr=(<span class="variable">$&#123;str// / &#125;</span>)  </div><div class="line">  </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;arr[@]&#125;</span>  </div><div class="line"><span class="keyword">do</span>  </div><div class="line">    wget https://files.rcsb.org/download/<span class="variable">$i</span>.pdb </div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p><p>执行如下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod +x down.sh</div><div class="line">./down.sh</div></pre></td></tr></table></figure><p>3.比对和提取结构。在pymol中打开靶标pdb文件。比对他们。除去水和原子。提取每个配体到自己的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pymol中执行</span></div><div class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</div><div class="line"><span class="keyword">for</span> fil <span class="keyword">in</span> glob(<span class="string">"*.pdb"</span>): cmd.load(fil)</div><div class="line">alignto</div><div class="line">remove solvent</div><div class="line">remove metal</div><div class="line">remove GOL</div><div class="line"><span class="comment">#选择配体BK1周围5埃外的小分子，并且删除，因为并未在结合位点内，不是配体</span></div><div class="line">select unligand,byres resname BK1 gap <span class="number">5</span> <span class="keyword">and</span> hetatm</div><div class="line">remove unligand</div><div class="line"><span class="comment">#选择配体</span></div><div class="line">select ligand,hetatm</div><div class="line">extract parvum,ligand</div><div class="line"><span class="comment">#保存配体</span></div><div class="line">save parvumlig.pdb,parvum</div><div class="line">remove ligand</div></pre></td></tr></table></figure><p>4.保存受体和配体文件，注意的是<code>3LI9</code>没有酶结构域，<code>3DFA</code>和<code>2QG5</code>为未结合态结构，综合考虑我们将其删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">remove <span class="number">3L</span>I9 <span class="keyword">and</span> <span class="number">3</span>DFA <span class="keyword">and</span> <span class="number">2</span>QG5</div></pre></td></tr></table></figure><p>保存(注意一下需要保存为python文件后<code>run</code>进行操作)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> cmd.get_names():cmd.save(name + <span class="string">".pdb"</span> , name )</div></pre></td></tr></table></figure><p>5.将配体导入进单一文件，由于我们之前做了，该步骤无需做</p><p>6.对接测试集化合物到每个受体结构，例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">smina --seed 0 --autobox_ligand parvumlig.pdb -r 2WEI.pdb \</div><div class="line">-l combined.sdf -o 2WEI_docked.sdf.gz</div></pre></td></tr></table></figure><p>在这里我们制定了一个随机种子。结合盒子采用<code>autobox_ligand</code>设置，创建的盒子大小为对于提供的配体8埃缓冲。配体，受体和输出文件可以使用任意OpenBabel支持的格式。</p><p>7.获取每个化合物<a href="/images/2017/smina/2WEI_docked.txt">输出</a>得分最高的对接姿势。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sdsorter -sort minimizedAffinity -reduceconfs 1 2WEI_docked.sdf.gz \</div><div class="line">-<span class="built_in">print</span> -c &gt; 2WEI_docked.txt</div></pre></td></tr></table></figure><p>8.分析对接结果，原文是使用的R进行的分析，大家可以以下做参考，当然也可以依葫芦画瓢使用Python进行处理。</p><p>(a)R版本方法如下:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">install.packages(<span class="string">"pROC"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"pROC"</span>)</div><div class="line"></div><div class="line">rarr=list()</div><div class="line"><span class="keyword">for</span> (file <span class="keyword">in</span> Sys.glob(<span class="string">"*docked.txt"</span>)) &#123;</div><div class="line"> d = read.table(file,header=<span class="literal">T</span>)</div><div class="line"> r = roc(grepl(<span class="string">"active"</span>,d $Title) , d$minimizedAffinity,direction=<span class="string">"&gt;"</span>)</div><div class="line"> rarr[[length(rarr)+<span class="number">1</span>]]=r</div><div class="line">&#125;</div><div class="line">names(rarr) = Sys.glob(<span class="string">"*docked.txt"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> (n <span class="keyword">in</span> names(rarr)) &#123;</div><div class="line"> r = rarr[[n]]</div><div class="line"> a = auc(r,partial.auc=c(<span class="number">1</span>,<span class="number">.9</span>),partial.auc.correct= <span class="literal">T</span> )</div><div class="line"> s = sprintf(<span class="string">"%s %.4 f%.4f\n"</span> , sub(<span class="string">"_docked.txt"</span> ,<span class="string">""</span>,n),r$auc[<span class="number">1</span>],a[<span class="number">1</span>])</div><div class="line"> cat(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>图大致如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/smina/SMINA6.png" alt="图6" title="">                </div>                <div class="image-caption">图6</div>            </figure><p>   AUC和Partial AUC的值分别为<code>0.8520</code>,<code>0.6485</code>。此数据运用的为官方数据，python版本为我自己写的方法，供参考</p><p>(b) ython版本如下:</p><p>首先我们使用<code>awk</code>处理一下原始文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS='</span>_<span class="string">';OFS='</span>\t<span class="string">'&#125;&#123;print $1,$2&#125;'</span> 2WEI_docked.txt rocdata.txt</div><div class="line"><span class="comment">#打开文件，在Title后加type项</span></div></pre></td></tr></table></figure><p>得到的文件可以从这里<a href="/images/2017/smina/rocdata.txt">下载</a>，python脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf-8-*-</span></div><div class="line"><span class="comment">#python=3.x</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, roc_auc_score</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="comment"># 读取数据</span></div><div class="line">df=pd.read_csv(<span class="string">'rocdata.txt'</span>,sep=<span class="string">'\t'</span>)</div><div class="line"></div><div class="line">df.loc[<span class="keyword">lambda</span> df: df.type==<span class="string">'active'</span>,[<span class="string">'type'</span>]]=<span class="string">'1'</span></div><div class="line">df.loc[<span class="keyword">lambda</span> df: df.type==<span class="string">'unactive'</span>,[<span class="string">'type'</span>]]=<span class="string">'0'</span></div><div class="line">df[<span class="string">'minimizedAffinity'</span>]=df[<span class="string">'minimizedAffinity'</span>]/<span class="number">-10.76520</span></div><div class="line">y=df[<span class="string">'type'</span>].astype(<span class="string">'int64'</span>)</div><div class="line">scores=df[<span class="string">'minimizedAffinity'</span>]</div><div class="line"></div><div class="line"><span class="comment"># ROC</span></div><div class="line">fpr,tpr,thresholds=roc_curve(y,scores,pos_label=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">#auc值</span></div><div class="line">auc=roc_auc_score(df[<span class="string">'type'</span>].astype(<span class="string">'int64'</span>),scores)</div><div class="line"></div><div class="line"><span class="comment">#绘图</span></div><div class="line">plt.figure()</div><div class="line">plt.plot(fpr,tpr,color=<span class="string">'darkorange'</span>,lw=<span class="number">2</span>,label=<span class="string">'pavum ROC curve,auc %0.2f'</span> % auc)</div><div class="line">plt.xlim([<span class="number">0.0</span>,<span class="number">1.0</span>])</div><div class="line">plt.ylim([<span class="number">0.0</span>,<span class="number">1.05</span>])</div><div class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>],color=<span class="string">'navy'</span>,lw=<span class="number">2</span>,linestyle=<span class="string">'--'</span>)</div><div class="line">plt.xlabel(<span class="string">'False Positive Rate'</span>)</div><div class="line">plt.ylabel(<span class="string">'True Positive Rate'</span>)</div><div class="line">plt.title(<span class="string">'2WEI ROC curve'</span>)</div><div class="line">plt.legend(loc=<span class="string">"lower right"</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/smina/SMINA9.png" alt="图9" title="">                </div>                <div class="image-caption">图9</div>            </figure><h1 id="2-E-tenella-CDPK1-模型和-测试集预测"><a href="#2-E-tenella-CDPK1-模型和-测试集预测" class="headerlink" title="2. E.tenella CDPK1 模型和 测试集预测"></a>2. <em>E.tenella</em> CDPK1 模型和 测试集预测</h1><p>现在我们创建一个<em>E.tenella</em>模型来进行虚拟筛选和发展基于先前得分结果的用户自定义的得分功能。</p><h2 id="2-1-建模"><a href="#2-1-建模" class="headerlink" title="2.1 建模"></a>2.1 建模</h2><p>基于之前章节的对接结果，<em>T.gondii</em>在全局和结合位点的序列中是更加接近<em>E.tenella</em>的.3T3U是<em>T.gondii</em>最优得分性能的一个结构（AUC和早期经验性AUC评价），因此我们使用SWISS-Model构建swissmodel3T3U.pdb</p><h2 id="2-2-对接测试集"><a href="#2-2-对接测试集" class="headerlink" title="2.2 对接测试集"></a>2.2 对接测试集</h2><p>这里有提供<a href="/images/2017/smina/cdpk1_externaltestset.txt">22个化合物</a>和<a href="/images/2017/smina/tdt2014.xlsx">详细实验数据</a>作为模型的测试集</p><p>1.转化为SMILES格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">' NR&gt;1&#123;print $2, $1&#125; '</span> tdt2-challenge3-cdpk1_externaltestset.txt \</div><div class="line">&gt; testset.smi</div></pre></td></tr></table></figure><p>2.生成构像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rdconf.py --maxconfs 1 testset.smi testset.sdf</div></pre></td></tr></table></figure><p>3.对接测试集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">smina --autobox_ligand allligs.pdb -r swissmodel3T3U.pdb  \</div><div class="line">   -l ../testset.sdf -o testset_docked.sdf --seed 0</div></pre></td></tr></table></figure><p>4.选择和排序得分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sdsorter -sort minimizedAffinity testset_docked.sdf -reduceconfs 1 \</div><div class="line">testset_docked_best.sdf -<span class="built_in">print</span> -c &gt; testset_default_ranking.txt</div></pre></td></tr></table></figure><p>最佳得分构像如下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/smina/SMINA8.png" alt="图7" title="">                </div>                <div class="image-caption">图7</div>            </figure><h2 id="2-3-用户自定义得分"><a href="#2-3-用户自定义得分" class="headerlink" title="2.3 用户自定义得分"></a>2.3 用户自定义得分</h2><p>我们发展了用户自定义得分功能用以<em>T.gondii</em>测试集参数化。增加到默认的得分功能上。</p><p>1.删除atom-types项目（如果考虑所有可能的原子类型组合，这将是一个非常大的项目），同样包括默认的第二Gaussian项目，他同样存在于默认得分之中。所有的权重均设为1.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">smina --print_terms | \</div><div class="line">  grep -v -E <span class="string">'atom_type|constant|num_|ligand_length'</span> &gt; allterms </div><div class="line"><span class="built_in">echo</span> <span class="string">"gauss(o=3,_w=2,_c=8)"</span> &gt;&gt; allterms </div><div class="line">sed -i <span class="string">'s/^/1.0 /'</span> allterms</div></pre></td></tr></table></figure><blockquote><p><code>grep -v -E</code>的用法比较少，<code>-v</code>表示不包含匹配文本的所有行，<code>-E</code>为启用正则表达式</p></blockquote><p>2.得分最高的构像3T3U测试集拿来进行比较,由于我这里只做了2WEI，所以实际上此步我用的2WEI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 提取最高得分构像</span></div><div class="line">sdsorter -sort minimizedAffinity -reduceconfs 1 \</div><div class="line">    3T3U_docked.sdf.gz 3T3U_docked_single.sdf.gz</div><div class="line"><span class="comment"># 重新打分，不用再继续跑</span></div><div class="line">smina --custom_soring allterms --score_only </div><div class="line">    -l 3T3U_docked_single.sdf.gz -r 3T3U.pdb | \</div><div class="line">    grep <span class="string">"##"</span> | sed <span class="string">"s/##//"</span> | \</div><div class="line">    awk <span class="string">'&#123;print $1 ~ /_active/, $0&#125;'</span> &gt; allscores</div></pre></td></tr></table></figure><blockquote><p>原文档中最后一行为/active/，但是个人觉得并没有达到区分active和unactive的用途，故本人对其进行了修改。可以从此<a href="/images/2017/smina/allscores">下载文件</a>。</p></blockquote><p>3.作者使用R中的<code>rms</code>包和<strong>logistical</strong>回归来进行后向变量选择来契合活性数据的得分。为了防止过拟合，只选择p-值较低的功能（&lt;.0001）。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">install.packages(<span class="string">"rms"</span>)</div><div class="line"><span class="keyword">library</span>(rms)</div><div class="line">scores=read.table(<span class="string">"allscores"</span>,header=<span class="literal">T</span>)[c(-<span class="number">2</span>)]   <span class="comment">#remove Name  colum</span></div><div class="line">colnames(scores)[<span class="number">1</span>]=<span class="string">"activity"</span></div><div class="line">formula=reformulate(name(scores)[c(-<span class="number">1</span>)],respinse=<span class="string">"activity"</span>)</div><div class="line">fit=lrm(formula,data=scores,x=<span class="literal">T</span>,y=<span class="literal">T</span>)</div><div class="line">fit2=fastbw(fit,rule=<span class="string">"p"</span>,sls=<span class="number">0.0001</span>)</div><div class="line"><span class="keyword">for</span>(n <span class="keyword">in</span> names(fit2$coefficients))&#123;</div><div class="line">  cat(sprintf(<span class="string">"%f %s\n"</span>,fit2$coefficients[[n]],n))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>4.保存测定的系数coefficients以创建新的评分函数。因为项目名称中包含特征符，其在R中是无效命名，所以需要编辑输入以重新储存适当的terms，得分函数的结果如图下:</p><p>   <img src="/images/2017/smina/SMINA10.png" alt="图10"></p><p>5.通过将系数乘以每一项的平均值来创建该评分函数中每个项的贡献的平均估计</p><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">aves=apply(scores[name(coef(fit2))[-<span class="number">1</span>]],<span class="number">2</span>,mean)*coef(fit2)[-<span class="number">1</span>]</div><div class="line"><span class="keyword">for</span>(n <span class="keyword">in</span> names(aves))&#123;</div><div class="line">  cat(sprintf(<span class="string">"%f %s\n"</span>,aves[[n]],n))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>   结果如下图</p><p>   <img src="/images/2017/smina/SMINA11.png" alt="图11"></p><p>   疏水性，VDW，氢键和溶剂化为有利相互作用，非疏水性，排斥性和受体-受体为负相关作用。VDW和gauss具有非常强的权重，线性氢键和Lennard Jones氢键展示了一些权重。</p><p>4*.Python包实现，Python的scikit-learn中对于logistical并没有P-值，译者对与R也不是特别理解，不知道能否领会作者的含义，以下仅供参考。 我们采用scikit-learn包中的logistical回归，同时将数据为训练集（75%）与测试集，检测是否过拟合，若没有测试集效果也不错，就使用所有的作为训练集再次训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"></div><div class="line"><span class="comment"># 首先将文件的两个空格，替换为一个空格，或者sep 写成`空格+`</span></div><div class="line">df=pd.read_table(<span class="string">'allscores'</span>,sep=<span class="string">' '</span>)</div><div class="line"></div><div class="line"><span class="comment"># 采用的为分层采样，以避免训练集和测试集不均匀的现象</span></div><div class="line">X_train,X_test,y_train,y_test=train_test_split(df.iloc[:,<span class="number">2</span>:],df[<span class="string">'type'</span>],test_size=<span class="number">0.15</span>,stratify=df[<span class="string">'type'</span>])</div><div class="line"></div><div class="line"><span class="comment"># sklearn是机器学习库，而非统计库，所以去掉不相关的feature的话可以使用l1 regularization，默认的阈值为0.0001，相同</span></div><div class="line">regr=linear_model.LogisticRegression(penalty=<span class="string">'l1'</span>)</div><div class="line">regr.fit(X_train,y_train)</div><div class="line"></div><div class="line">print(<span class="string">'Coefficients:%s,intercept %s'</span>%(regr.coef_,regr.intercept_))</div><div class="line">print(<span class="string">'Score: %.2f'</span> % regr.score(X_test,y_test))</div></pre></td></tr></table></figure><p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Coefficients:[[-0.03864204  0.40028821 -0.00676393 -0.09159704 -0.0345586  -0.10145013</div><div class="line">   2.79993056  0.38033068  0.          0.         -0.00837466  0.</div><div class="line">   0.04403177]],intercept [-3.04932666]</div><div class="line">Score: 0.82</div></pre></td></tr></table></figure></p><p>译者计算出来和原作者计算出来有差异，主要就是hydrophobic和non_hydrophobic项两者的权重都为负数,项和值上也有差异。接下来我们乘上平均值得到最终权重。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.iloc[:,<span class="number">2</span>:].mean()*regr.coef_[<span class="number">0</span>]</div></pre></td></tr></table></figure><p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gauss(o=0,_w=0.5,_c=8)                          -2.447950</div><div class="line">repulsion(o=0,_c=8)                              0.602891</div><div class="line">hydrophobic(g=0.5,_b=1.5,_c=8)                  -0.331807</div><div class="line">non_hydrophobic(g=0.5,_b=1.5,_c=8)              -5.150272</div><div class="line">vdw(i=6,_j=12,_s=1,_^=100,_c=8)                 20.386651</div><div class="line">non_dir_h_bond_lj(o=-0.7,_^=100,_c=8)            1.535267</div><div class="line">non_dir_anti_h_bond_quadratic(o=0,_c=8)          0.205500</div><div class="line">non_dir_h_bond(g=-0.7,_b=0,_c=8)                 0.000000</div><div class="line">acceptor_acceptor_quadratic(o=0,_c=8)            0.000000</div><div class="line">donor_donor_quadratic(o=0,_c=8)                  0.000000</div><div class="line">gauss(o=3,_w=2,_c=8)                           -13.474894</div><div class="line">electrostatic(i=2,_^=100,_c=8)                   0.000000</div><div class="line">ad4_solvation(d-sigma=3.6,_s/q=0.01097,_c=8)     0.797093</div></pre></td></tr></table></figure></p><p>6.评价这个新的得分函数，使用这个新的得分函数fitscore（<strong>个人觉得是第一次得出的权重进行的计算，因为我用第二次的权重进行计算数值很大，此处待考</strong>）除了重新打分最高的对接姿势以外，我们重新打分和重新排序所有的对接姿势。值得注意的是这个得分函数是预测的活性而不是亲和力。越大的positive值表示的是复合物可能具有活性的概率更大，所以复合物在选择最佳构像排序的时候需要逆转数字顺序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">smina --score_only -r 3T3U.pdb -l 3T3U_docked_single.sdf.gz \</div><div class="line">        --custom_scoring fitscore -o 3T3U_docked_single_rescore.sdf.gz</div><div class="line"></div><div class="line">sdsorter  -<span class="built_in">print</span> -c 3T3U_docked_single_rescore.sdf.gz &gt; 3T3U_docked_single_rescore.txt</div><div class="line"></div><div class="line">smina --score_only -r 3T3U.pdb -l 3T3U_docked.sdf.gz \</div><div class="line">         --custom_scoring fitscore -o 3T3U_dcoked_rescore.sdf.gz</div><div class="line"></div><div class="line">sdsorter -reversesort minimizedAffinity -reduceconfs 1 -<span class="built_in">print</span> -c \</div><div class="line">          3T3U_docked_rescore.sdf.gz &gt;3T3U_docked_rescore.txt</div></pre></td></tr></table></figure><blockquote><p>译者在做的时候对第6条不是很理解</p></blockquote><p>7.使用新的得分函数对接<code>E.tenella</code>化合物集:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">smina --custom_scoring fitscore --score_only -l testset_docked.sdf \</div><div class="line">         -r swissmodel3T3U.pdb -o testset_rescored.sdf</div><div class="line">sdsorter -<span class="built_in">print</span> -c testset_rescored.sdf -reversesort minimizedAffinity \</div><div class="line">           -reduceconfs 1 testset_rescored_best.sdf \</div><div class="line">           &gt; testset_custom_ranking.txt</div></pre></td></tr></table></figure><p>   应该使用在这个测试集上表现更好的评分函数来进行完整的虚拟筛选选择化合物，结果可以从此<a href="images/SMINA5.tar.gz">下载</a></p><blockquote><p>译者认为自定义得分并未达到非常好的效果，可以进一步优化</p></blockquote><h1 id="3-虚拟筛选"><a href="#3-虚拟筛选" class="headerlink" title="3.虚拟筛选"></a>3.虚拟筛选</h1><p>  已经阐明精心设计的自定义得分可以很好的应用在<em>E.tenella</em>结构模型，我们进行筛选eMolecules化合物库。需要注意的是我们的自定义得分函数并不使用于对接，而是参数化预测已经对接好的姿势的活性。</p><p>1.下载eMolecules数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://downloads.emolecules.com/ordersc/2017-11-01/parent.smi.gz</div><div class="line">gunzip parent.smi.gz</div></pre></td></tr></table></figure><p>2.根据环境切割不同大小。例如，10000每块进行切割</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">split -n 1/10000 parent.smi -d -a 4 split_</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> split*; <span class="keyword">do</span> mv <span class="variable">$i</span> <span class="variable">$&#123;i&#125;</span>.smi; <span class="keyword">done</span></div></pre></td></tr></table></figure><p>3.生成构像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rdconf.py --maxconfs 1 split_0000.smi split_0000.sdf.gz</div></pre></td></tr></table></figure><p>4.对接每个块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">smina --autobox_ligand allligs.pdb -r swissmodel3T3U.pdb \</div><div class="line">          -l split_0000.sdf.gz -o docked_0000.sdf.gz --seed 0</div></pre></td></tr></table></figure><p>5.对获得的最高排名姿势使用默认的得分和自定义得分进行评价</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sdsorter -sort minimizedAffinity -reduceconfs 1 -nbest 100 \</div><div class="line">        docked_0000.sdf.gz best_default_0000.sdf.gz</div><div class="line">smina --custom_scoring fitscore --score_only -l docked_0000.sdf.gz \</div><div class="line">        -r swissmodel3T3U.pdb -o rescored_0000.sdf.gz</div></pre></td></tr></table></figure><p>6.将对接姿势放入一个文件并排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zcat bets_default_*.sdf.gz | gzip &gt; best_default.sdf.gz</div><div class="line">zcat best_custom_*.sdf.gz | gzip &gt; best_custom.sdf.gz</div><div class="line">sdsorter -sort- minimizedAffinity best_default.sdf.gz \</div><div class="line">        -nbest 1000 top1000_default.sdf.gz -<span class="built_in">print</span> -c \ </div><div class="line">         &gt; top1000_default.txt</div><div class="line">sdsorter -reversesort minimizedAffinity best_custom.sdf.gz \</div><div class="line">        -nbest 1000 top1000_custom.sdf.gz -<span class="built_in">print</span> -c \</div><div class="line">        &gt; top1000_custom.txt</div></pre></td></tr></table></figure><p>参考文献:<br>Ojo KK, Larson ET, Keyloun KR, Castaneda LJ, Derocher AE, Inampudi KK, Kim JE, Arakaki TL, Murphy RC, Zhang L, Napuli AJ, Maly DJ, Verlinde CL, Buckner FS, Parsons M, Hol WG, Merritt EA, Van Voorhis WC. (2010) Toxoplasma gondii calcium-dependent protein kinase 1 is a target for selective kinase inhibitors. Nat Struct Mol Biol. 17:602-7. PMID: 20436472 PMCID: PMC2896873</p><p>Murphy RC, Ojo KK, Larson ET, Castellanos-Gonzalez A, Perera BG, Keyloun KR, Kim JE, Bhandari JG, Muller NR, Verlinde CL, White AC, Merritt EA, Van Voorhis WC, Maly DJ. (2010) Discovery of Potent and Selective Inhibitors of Calcium-Dependent Protein Kinase 1 (CDPK1) from C. parvum and T. gondii. (2010) ACS Med Chem Lett. 1(7):331-335. PMID: 21116453 PMCID: PMC2992447</p><p>Johnson SM, Murphy RC, Geiger JA, Derocher A, Zhang Z, Ojo K, Larson E, Perera BG, Dale E, He P, Fox A, Mueller N, Merritt EA, Fan E, Reid M, Parsons M, Van Voorhis WC, Maly DJ. (2012) Development of Toxoplasma gondii Calcium-Dependent Protein Kinase 1 (TgCDPK1) Inhibitors with Potent Anti-Toxoplasma Activity. J Med Chem. 55(5):2416-26. PMID: 22320388 PMCID: PMC3306180</p><p>Larson ET, Ojo KK, Murphy RC, Johnson SM, Zhang Z, Kim JE, Leibly DJ, Fox AM, Reid MC, Dale EJ, Perera BG, Kim J, Hewitt SN, Hol WG, Verlinde CL, Fan E, Van Voorhis WC, Maly DJ, Merritt EA. (2012) Multiple Determinants for Selective Inhibition of Apicomplexan Calcium-Dependent Protein Kinase CDPK1. J Med Chem. 55(6):2803-10. PMID: 22369268 PMCID: PMC3336864</p><p>Ojo KK, Pfander C, Mueller NR, Burstroem C, Larson ET, Bryan CM, Fox AMW, Reid MC, Johnson SM, Murphy RC, Kennedy M, Henning Mann H, Leibly DJ, Hewitt SN, Verlinde CLMJ. Kappe S, Merritt EA, Maly DJ, Billker O, Van Voorhis WC. (2012) Transmission of malaria to mosquitoes blocked by bumped kinase inhibitors.  J. Clin. Invest. 122(6):2301–2305. doi: 10.1172/JCI61822  PMID:22565309 PMCID: PMC3366411</p><p>Zhang Z, Ojo KK, Johnson SM, Larson ET, He P, Geiger JA, Castellanos-Gonzalez A, White AC Jr, Parsons M, Merritt EA, Maly DJ, Verlinde CL, Van Voorhis WC, Fan E. (2012) Benzoylbenzimidazole-based selective inhibitors targeting Cryptosporidium parvum and Toxoplasma gondii calcium-dependent protein kinase-1. Bioorg Med Chem Lett. 22:5264-7. PMID: 22795629 PMCID: PMC3420979</p><p>Castellanos-Gonzalez A, A. White AC Jr, Ojo KK, Vidadala R, Zhang Z, Reid MC, Fox AMW, Keyloun KR, Rivas K, Irani A, Dann SM, Fan E, Maly DJ,  Wesley C Van Voorhis. (2013). A novel Calcium Dependent Protein Kinase Inhibitor as a lead compound for treating Cryptosporidiosis. J Infect. Dis. PMID: 23878324  2013 Jul 21. [Epub ahead of print]</p><p>Ojo KK, Eastman RT, Vidadala R, Zhang Z, Rivas KL, Choi R, Lutz JD, Reid MC, Fox AMW, Hulverson MA, Kennedy M, Isoherranen N, Kim LM, Comess KM, Kempf DJ, Verlinde CLMJ, Su X-Z, Kappe S, Maly DJ, Fan E, &amp; Van Voorhis WC. (2013) Specific inhibitor of PfCDPK4 blocks malaria transmission: Chemical-genetic validation. J Infect Dis. 2013 Oct 10. [Epub ahead of print] PMID: 24123773</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SMINA教程以CDPK1为例&lt;/p&gt;
&lt;p&gt;原作者:David Ryan Koes&lt;br&gt;翻译:康文渊&lt;/p&gt;
&lt;p&gt;若进行精读建议查看原文以及参考文献，本文是我根据教程快速阅读做的笔记&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q1:我们有autodock vina，为什
      
    
    </summary>
    
      <category term="分子对接" scheme="http://kangsgo.com/categories/%E5%88%86%E5%AD%90%E5%AF%B9%E6%8E%A5/"/>
    
    
      <category term="dock" scheme="http://kangsgo.com/tags/dock/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda虚拟环境的构建与包管理</title>
    <link href="http://kangsgo.com/4.html"/>
    <id>http://kangsgo.com/4.html</id>
    <published>2017-11-05T14:56:01.000Z</published>
    <updated>2017-11-05T14:50:17.139Z</updated>
    
    <content type="html"><![CDATA[<p>做生物信息，个人感觉R与python都挺重要的，个人更加喜欢python，因为其除了R的功能以外还可以做很多事情，可以成为一个全技jian工程师，当然公认的python的画图还是没有R强大。做python的科学计算，不得不提到大名鼎鼎的跨平台管理工具conda了，其有许多优势，再也不要看<code>pip</code>缺少什么依赖环境了，同时可以在任意版本的python中进行切换以及构建环境，非常好用。</p><h2 id="管理环境"><a href="#管理环境" class="headerlink" title="管理环境"></a>管理环境</h2><p>对于conda，你可以创建，输出，列出，移出和升级环境，可以切换你的不同版本的包环境。假如希望看到所有的命令文档，你可以使用<code>--help</code>进行查看，例如，了解conda环境命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda env --<span class="built_in">help</span></div></pre></td></tr></table></figure></p><p>简单的参数文档可以在<a href="http://conda.pydata.org/docs/commands.html" target="_blank" rel="external">commnand reference documentation</a>进行查阅。</p><h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><p>为了管理环境，我们需要创建至少两个环境来进行移动切换他们，为了创建新的环境，使用conda create命令，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create --name snowflakes biopython</div></pre></td></tr></table></figure></p><p>其将会创建一个名为<code>/envs/snowflakes</code>的新环境，包括biopython项目，这个环境使用的python版本为现在所使用的版本，因为你没有特别的指定版本。</p><h3 id="改变环境（activate-deactivate）"><a href="#改变环境（activate-deactivate）" class="headerlink" title="改变环境（activate/deactivate）"></a>改变环境（activate/deactivate）</h3><p>激活<br><strong>Linux,OS X：</strong> source activate snowflakes<br><strong>Windows：</strong> activate snowflakes<br>conda 添加path名（snowflakes）在你的系统命令中<br>TIP：环境默认安装在conda目录，你也可以特别的指定其它目录，具体查看<code>create --help</code>来获取更多描述</p><p>失活<br><strong>Linux, OS X:</strong> source deactivate<br><strong>Windows: </strong> deactivate<br>conda将移出路径（snowflakes）于你的系统命令</p><h3 id="创建独立的环境"><a href="#创建独立的环境" class="headerlink" title="创建独立的环境"></a>创建独立的环境</h3><p>你可以创建新的环境采用不同的python版本，安装不同的包等等，例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create --name bunnies python=3 astroid babel</div></pre></td></tr></table></figure></p><h3 id="列出所有的环境"><a href="#列出所有的环境" class="headerlink" title="列出所有的环境"></a>列出所有的环境</h3><p>可以通过info信息来列出所有环境内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda info --envs</div></pre></td></tr></table></figure></p><p>你可以列出所有的环境参数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">conda environments:</div><div class="line">snowflakes            /home/username/miniconda/envs/snowflakes</div><div class="line">bunnies               /home/username/miniconda/envs/bunnies</div></pre></td></tr></table></figure></p><h3 id="验证当前环境"><a href="#验证当前环境" class="headerlink" title="验证当前环境"></a>验证当前环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda info --envs</div></pre></td></tr></table></figure><p>conda 将列出所有环境，当前环境会高亮且带有’*’的特征符</p><h3 id="克隆环境"><a href="#克隆环境" class="headerlink" title="克隆环境"></a>克隆环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create --name flowers --<span class="built_in">clone</span> snowflakes</div></pre></td></tr></table></figure><h3 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda remove --name flowers --all</div></pre></td></tr></table></figure><h3 id="设置国内镜像"><a href="#设置国内镜像" class="headerlink" title="设置国内镜像"></a>设置国内镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</div><div class="line"></div><div class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</div></pre></td></tr></table></figure><p>设置了清华大学镜像源，速度肯定嗖嗖的。</p><p>但是清华大学的镜像包还是不够给力，我们可以增加<a href="https://bioconda.github.io/index.html" target="_blank" rel="external">bioconda</a>隧道，这样就不用在官网龟速安装了~<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</div><div class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</div></pre></td></tr></table></figure></p><p>执行完上述命令后，会生成<code>~/.condarc(Linux/Mac)</code>或<code>C:\Users\USER_NAME\.condarc</code>文件，记录着我们对conda的配置，直接手动创建、编辑该文件是相同的效果。</p><p>参考资料:<br><a href="https://my.oschina.net/u/2306127/blog/634674" target="_blank" rel="external">Conda-Anaconda的虚拟环境和包管理功能</a><br><a href="http://www.jianshu.com/p/2f3be7781451" target="_blank" rel="external">Anaconda使用总结</a></p><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><p>创建一个python2.7环境<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/903467-a5947b7ac473035d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>激活环境并下载wxpython<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">activate wxpython</div><div class="line">pip install expython</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做生物信息，个人感觉R与python都挺重要的，个人更加喜欢python，因为其除了R的功能以外还可以做很多事情，可以成为一个全技jian工程师，当然公认的python的画图还是没有R强大。做python的科学计算，不得不提到大名鼎鼎的跨平台管理工具conda了，其有许多优
      
    
    </summary>
    
      <category term="Python" scheme="http://kangsgo.com/categories/Python/"/>
    
    
      <category term="anconda" scheme="http://kangsgo.com/tags/anconda/"/>
    
  </entry>
  
  <entry>
    <title>smina安装与简介</title>
    <link href="http://kangsgo.com/3.html"/>
    <id>http://kangsgo.com/3.html</id>
    <published>2017-11-02T15:36:39.000Z</published>
    <updated>2017-11-02T15:38:05.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>smina 是基于<a href="http://vina.scripps.edu/" target="_blank" rel="external">Autodock Vina</a>的软件，主要聚焦于提升算法和最小化。主要的改变包括:</p><ul><li>通过OpenBabel提供能多的配体分子格式</li><li>支持多配体文件</li><li>增加术语类型（例如:去溶剂化能，静电势能）</li><li>支持用户自定义得分参数和得分功能</li><li>基于特异的结合配体自动计算盒子</li><li>允许输出超过20个对接姿势</li><li>提升了最小化算法</li></ul><p>*如果配体不是pdbqt格式，那么在文件中需要局部电荷。完成这项工作在OpenBabel和AutoDock Tools中的prepare_ligand4.py脚本中会有不同的结果。</p><p>静态编译文件提供了openbabel和boost（1.5.4），但是要求内核高于2.6.24</p><h2 id="Ubuntu下安装"><a href="#Ubuntu下安装" class="headerlink" title="Ubuntu下安装"></a>Ubuntu下安装</h2><p>首先在网站上下载<code>smina.static</code>文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cp smina.static /usr/<span class="built_in">local</span>/bin/smina</div></pre></td></tr></table></figure></p><p>然后可以输入<code>smina --help</code>查看预编译版本是否可用</p><h2 id="输入文件简介"><a href="#输入文件简介" class="headerlink" title="输入文件简介"></a>输入文件简介</h2><p>输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"># arg表示该参数后面需要加参数</div><div class="line"> -r [--receptor] arg刚性受体（PDBQT）</div><div class="line"> --flex arg      柔性侧链（PDBQT）</div><div class="line"> -l [--ligand] arg  配体（s）</div><div class="line"> --flexres arg  特别的柔性侧链，通过逗号分隔 chain:resid</div><div class="line"> --flexdist_ligand arg 用于flexdist的配体</div><div class="line"> --flexdist arg  该参数表示flexdist配体多少距离以内设为柔性配体</div><div class="line"></div><div class="line"> 搜寻空间 (required):</div><div class="line">  --center_x arg        X中心坐标</div><div class="line">  --center_y arg        Y中心坐标</div><div class="line">  --center_z arg        Z中心坐标</div><div class="line">  --size_x arg          X尺寸大小 (Angstroms)</div><div class="line">  --size_y arg          Y尺寸大小 (Angstroms)</div><div class="line">  --size_z arg          Z尺寸大小 (Angstroms)</div><div class="line">  --autobox_ligand arg  自动创建盒子的配体</div><div class="line">  --autobox_add arg     若为自动创建盒子，那么缓冲空间的数量，默认为+4</div><div class="line">  --no_lig              无配体;对于取样/最小化柔性残基</div><div class="line"></div><div class="line">评分和最小化设置:</div><div class="line">  --custom_scoring arg         自定义得分文件</div><div class="line">  --score_only                 配体姿势得分</div><div class="line">  --local_only                 使用盒子进行局部搜索 (可能需要附带使用 --minimize)</div><div class="line">  --minimize                   能量最小化</div><div class="line">  --randomize_only             生成随机姿势，避免空间位阻</div><div class="line">  --minimize_iters arg (=0)    最陡下降法迭代数量，默认值是无法收敛的，我用的ahr为5000，可以用gmx等软件查看收敛系数</div><div class="line">  --accurate_line              使用精确的线性搜索</div><div class="line">  --minimize_early_term        S最小化搜索的终止能量 </div><div class="line">  --approximation arg          使用的近似 (linear, spline, or exact)</div><div class="line">  --factor arg                 近似因子: finer-grained效果较好</div><div class="line">  --force_cap arg              最大允许力，低值对于最小化clashing结构更好</div><div class="line">  --user_grid arg              用户计算若需要用到的格点文件Autodock map 文件</div><div class="line">  --user_grid_lambda arg (=-1) 缩放user_grid和功能得分</div><div class="line">  --print_terms                打印所有项目和默认值</div><div class="line">  --print_atom_types           打印所有可用原子类型</div><div class="line"></div><div class="line">输出设置 (optional):</div><div class="line">  -o [ --out ] arg      输出文件，格式根据后缀来</div><div class="line">  --out_flex arg        对于柔性残基的输出文件</div><div class="line">  --log arg             可设置的log文件</div><div class="line">  --atom_terms arg      可设置的输出每个残基的联系值</div><div class="line">  --atom_term_data      封装每个残基的联系值进入sd数据</div><div class="line"></div><div class="line">Misc (optional):</div><div class="line">  --cpu arg                  使用的cpu数量，默认全使用</div><div class="line">  --seed arg                 随机种子</div><div class="line">  --exhaustiveness arg (=8)  用尽一切的全局搜索</div><div class="line">  --num_modes arg (=9)      最大结合模式生成数量</div><div class="line">  --energy_range arg (=3)   最好和最低结合之间的数值设置(kcal/mol)</div><div class="line">  --min_rmsd_filter arg (=1) rmsd阈值</div><div class="line">  -q [ --quiet ]             禁止输出消息</div><div class="line">  --addH arg                 自动加氢（默认是执行的）</div><div class="line">  --flex_hydrogens           开启氢键转角</div><div class="line"></div><div class="line">设置文件 (optional):</div><div class="line">  --config arg          以上的设置可以放入这个文件</div><div class="line"></div><div class="line">信息 (optional):</div><div class="line">  --help                展示帮助</div><div class="line">  --help_hidden         展示包含隐藏设置的帮助</div><div class="line">  --version             版本</div></pre></td></tr></table></figure></p><p>具体的分子对接待编辑<br>未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;smina 是基于&lt;a href=&quot;http://vina.scripps.edu/&quot; target=&quot;_blank&quot; rel=&quot;exter
      
    
    </summary>
    
      <category term="分子对接" scheme="http://kangsgo.com/categories/%E5%88%86%E5%AD%90%E5%AF%B9%E6%8E%A5/"/>
    
    
      <category term="软件安装" scheme="http://kangsgo.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
      <category term="Dock" scheme="http://kangsgo.com/tags/Dock/"/>
    
  </entry>
  
  <entry>
    <title>chimera制作旋转动画</title>
    <link href="http://kangsgo.com/834.html"/>
    <id>http://kangsgo.com/834.html</id>
    <published>2017-10-29T04:42:20.000Z</published>
    <updated>2017-10-29T04:45:51.442Z</updated>
    
    <content type="html"><![CDATA[<p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Open <span class="number">2</span>GHA.pdb.</div><div class="line"></div><div class="line">Delete chain B. Select / Chain / B <span class="keyword">and</span> Actions / Atoms / Delete</div><div class="line"></div><div class="line">Color ribbon. Presets / Interactive <span class="number">1</span> (ribbons)</div><div class="line"></div><div class="line">Highlight ligand. Select / Structure / Ligand <span class="keyword">and</span> Actions / Atoms / Sphere</div><div class="line"></div><div class="line">Clear selection. Select / Clear Selection</div><div class="line"></div><div class="line">Rotate <span class="number">360</span> degrees. Favorites / Command Line</div><div class="line"></div><div class="line">          turn y <span class="number">1</span> <span class="number">360</span></div><div class="line"></div><div class="line">Record “spin” movie.</div><div class="line"></div><div class="line">         movie record ; turn y <span class="number">1</span> <span class="number">360</span> ; wait ; movie encode</div><div class="line"></div><div class="line">Semicolons separate commands on one line.</div><div class="line"></div><div class="line">movie record starts capturing images.</div><div class="line"></div><div class="line">wait prevents going to the next command until motion finishes.</div><div class="line"></div><div class="line">movie encode writes the images to a movie file.</div></pre></td></tr></table></figure><p>如果是windows一般保存在桌面上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div clas
      
    
    </summary>
    
      <category term="绘图与可视化" scheme="http://kangsgo.com/categories/%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="chimera" scheme="http://kangsgo.com/tags/chimera/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本读取PDB文件中的长宽高</title>
    <link href="http://kangsgo.com/840.html"/>
    <id>http://kangsgo.com/840.html</id>
    <published>2017-10-29T04:41:15.000Z</published>
    <updated>2017-10-29T04:42:05.851Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="comment">#作者：GROMACS中文组群: 广药-阿福</span></div><div class="line"><span class="comment">#x轴</span></div><div class="line">grep ^ATOM <span class="variable">$1</span> | awk ‘&#123;<span class="built_in">print</span> <span class="variable">$7</span>&#125;’| sort -n |sed -n ‘1p;<span class="variable">$p</span>’</div><div class="line"><span class="comment">#y轴</span></div><div class="line">grep ^ATOM <span class="variable">$1</span> | awk ‘&#123;<span class="built_in">print</span> <span class="variable">$8</span>&#125;’| sort -n |sed -n ‘1p;<span class="variable">$p</span>’</div><div class="line"><span class="comment">#z轴</span></div><div class="line">grep ^ATOM <span class="variable">$1</span> | awk ‘&#123;<span class="built_in">print</span> <span class="variable">$9</span>&#125;’| sort -n |sed -n ‘1p;<span class="variable">$p</span>’</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
      
    
    </summary>
    
      <category term="Linux" scheme="http://kangsgo.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Dock6安装教程</title>
    <link href="http://kangsgo.com/844.html"/>
    <id>http://kangsgo.com/844.html</id>
    <published>2017-10-29T04:36:39.000Z</published>
    <updated>2017-10-29T04:40:52.806Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有使用Dock了，不知不觉中已经更新到了6.8。首先需要在官网填写资料下载:<a href="http://dock.compbio.ucsf.edu/DOCK_6/index.htm" target="_blank" rel="external">http://dock.compbio.ucsf.edu/DOCK_6/index.htm</a> 每个邮箱可以登陆5次，不过用完了可以新用一个邮箱，申请过的邮箱不能再次申请，需要发邮件或者重新使用一个邮箱。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/903467-e4b37e3e48599ab4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dock" title="">                </div>                <div class="image-caption">dock</div>            </figure><p>安装方法也非常简单，如下:</p><h3 id="1-安装依赖环境"><a href="#1-安装依赖环境" class="headerlink" title="1.安装依赖环境"></a>1.安装依赖环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install c++</div><div class="line">sudo apt-get install g++</div><div class="line">sudo apt-get install gfortran</div><div class="line">sudo apt-get install cmake</div></pre></td></tr></table></figure><h3 id="2-解压文件进入目录"><a href="#2-解压文件进入目录" class="headerlink" title="2.解压文件进入目录"></a>2.解压文件进入目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -zxvf dock.6.8.tar.gz</div><div class="line"><span class="built_in">cd</span> dock6/install</div></pre></td></tr></table></figure><h3 id="3-设置Configure文件"><a href="#3-设置Configure文件" class="headerlink" title="3.设置Configure文件"></a>3.设置Configure文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure [configuration file]</div></pre></td></tr></table></figure><p>[configuration file]完整的可以看官方教程<br><a href="http://dock.compbio.ucsf.edu/DOCK_6/dock6_manual.htm#Installation" target="_blank" rel="external">http://dock.compbio.ucsf.edu/DOCK_6/dock6_manual.htm#Installation</a></p><p>这里介绍几个常用的:<br><code>gnu</code> : GNU编译（需要CUDA？）<br><code>gnu.parallel</code> :GNU和多线程编译<br><code>intel</code> :Intel编译<br><code>intel.parallel</code> :Intel多线程编译</p><p>我选择的是<code>gnu</code>版本，即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure gnu</div></pre></td></tr></table></figure><h3 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make all</div></pre></td></tr></table></figure><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="built_in">test</span></div><div class="line">make <span class="built_in">test</span></div><div class="line">make check</div></pre></td></tr></table></figure><p>如果安装了maber的话，由于<code>$AMBERHOME</code>被占用，会导致ambersize测试失败。大致提示如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&gt; make[2]: Leaving directory &apos;/home/rdx12/Downloads/dock6/dock6</div><div class="line">&gt; Apr/install/test/zou_gbsa_score&apos;</div><div class="line">&gt; </div><div class="line">&gt; cd amber_score_181l &amp;&amp; make test</div><div class="line">&gt; </div><div class="line">&gt; make[2]: Entering directory &apos;/home/rdx12/Downloads/dock6/dock6</div><div class="line">&gt; Apr/install/test/amber_score_181l&apos;</div><div class="line">&gt; </div><div class="line">&gt; ../../../bin/prepare_amber.pl lig.mol2 181l.pdb</div><div class="line">&gt; </div><div class="line">&gt; Error from amberize_receptor; examine amberize_receptor.out</div><div class="line">&gt; </div><div class="line">&gt; ../default_targets.h:18: recipe for target &apos;amberize&apos; failed</div><div class="line">&gt; </div><div class="line">&gt; make[2]: *** [amberize] Error 25</div><div class="line">&gt; </div><div class="line">&gt; make[2]: Leaving directory &apos;/home/rdx12/Downloads/dock6/dock6</div><div class="line">&gt; Apr/install/test/amber_score_181l&apos;</div><div class="line">&gt; </div><div class="line">&gt; Makefile:43: recipe for target &apos;amberdock&apos; failed</div><div class="line">&gt; make[1]: *** [amberdock] Error 2</div></pre></td></tr></table></figure><p>你需要解掉变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">unset</span> AMBERHOME <span class="comment">#(bash)</span></div><div class="line">unsetenv AMBERHOME <span class="comment">#(tcsh)</span></div></pre></td></tr></table></figure><h3 id="6-设置环境变量"><a href="#6-设置环境变量" class="headerlink" title="6.设置环境变量"></a>6.设置环境变量</h3><p>常规的设置环境变量如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gedit  ~/.bashrc      <span class="comment">#打开.bashrc  </span></div><div class="line">  </div><div class="line"><span class="comment">#DOCK6.8  </span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/kangsgo/install/dock6/bin</div><div class="line">  </div><div class="line"><span class="built_in">source</span> ~/.bashrc      <span class="comment">#source立即生效</span></div></pre></td></tr></table></figure><p>查看可以发现dock6.8自带了<code>antechamber</code>等一些amber里也有的东西,不知道会不会产生问题，我仅仅设置了一个DOCK目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gedit  ~/.bashrc      <span class="comment">#打开.bashrc  </span></div><div class="line">  </div><div class="line"><span class="comment">#DOCK6.8  </span></div><div class="line">DOCKHOME=/home/kangsgo/install/dock6/bin </div><div class="line">  </div><div class="line"><span class="built_in">source</span> ~/.bashrc      <span class="comment">#source立即生效</span></div></pre></td></tr></table></figure><p>这样每次输入的时候都是用的<code>$DOCKHOME</code>加命令</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有使用Dock了，不知不觉中已经更新到了6.8。首先需要在官网填写资料下载:&lt;a href=&quot;http://dock.compbio.ucsf.edu/DOCK_6/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://do
      
    
    </summary>
    
      <category term="分子对接" scheme="http://kangsgo.com/categories/%E5%88%86%E5%AD%90%E5%AF%B9%E6%8E%A5/"/>
    
    
      <category term="软件安装" scheme="http://kangsgo.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
      <category term="Dock" scheme="http://kangsgo.com/tags/Dock/"/>
    
  </entry>
  
  <entry>
    <title>Martini 2.2P力场笔记</title>
    <link href="http://kangsgo.com/811.html"/>
    <id>http://kangsgo.com/811.html</id>
    <published>2017-10-10T03:02:14.000Z</published>
    <updated>2017-10-28T04:00:38.002Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><blockquote><p><span style="color: #000000;">阅读前请注意:</span></p><p><span style="color: #000000;">1.此文仅是我看Martini文献的一些总结，若需要使用Martini力场建议仔细的查看官网信息和相关文献。此文花费较大精力，若有什么意见或者建议欢迎发邮箱交流。邮箱为<strong>kangsgo@vip.qq.com  湖大-小康</strong></span></p><p><span style="color: #000000;">2.由于我只关注蛋白模拟，故只查阅了Martini力场2.2的文献以及蛋白参数文献</span></p><p><span style="color: #000000;">3.此笔记对于Martini性能评测部分只关注了部分内容</span><br>Martini力场自问世以来就受到了很多人的喜爱，特别是蛋白的力场，最近（2013年）Martini力场在许多方面都有应用。包括如下:1.蛋白调节囊泡的融合.2.膜结构域的形成.3.磷脂的翻转（flip-flopping）.4.磷脂和表面行为（？lipid and surfactant phase behavior）5.单磷脂层的折叠.6.膜束缚（?tether）的形成.7.肽和蛋白介导的膜的重构.7.膜蛋白的自组装和磷脂的分类.8.膜蛋白的门控和构象的变化.9.固体上蛋白的吸附作用.10.蛋白纤维的机制研究.10.蛋白的聚集.11.肽的两亲性12.淀粉纤维研究.13.纳米孔吸附和表面湿度.14.纳米孔的跨膜转运和磷脂吸附.15.膜工程.16.多聚物介导的膜黏附和束缚(?tether).17.<span class="word">nanocoating</span> <span class="word">of</span> <span class="word">a </span><span class="word">polymer</span> <span class="word">matrix.17.蛋白配体的结合.18.脂蛋白颗粒和纳米圆盘的结构和动力学研究.19.药物传递体系等等。</span></p></blockquote><p>Martini 2.2和Martini 2.0相比较，做了如下内容的提升:</p><p>对蛋白力场进行了修复，包括：</p><p>(i)新的脯氨酸，苯丙氨酸和色氨酸侧链拓扑，以改善分区自由能(?partitioning free energies)</p><p>(ii)引入偏心电荷模型，以更实际地描述相反电荷的残基之间的联系。</p><p><span style="color: #ff0000;">以上两条简而言之就是对之前的电荷模型进行很大的优化</span></p><p>(iii)对于极性侧链参数化极性珠子以提升在非极性环境中的二聚化和表明的结合(iv)调整键的项目来提升α螺旋的长度和增加多聚丙氨酸和谷氨酸的稳定性。</p><p>新版本力场命名为Martini 2.2（若为极性水模型，则为2.2P）</p><h5 id="Martini-2-2的评价使用了如下的参考评价内容"><a href="#Martini-2-2的评价使用了如下的参考评价内容" class="headerlink" title="Martini 2.2的评价使用了如下的参考评价内容:"></a>Martini 2.2的评价使用了如下的参考评价内容:</h5><h6 id="伞状采样（PS-文献中纳入为分区自由能中）"><a href="#伞状采样（PS-文献中纳入为分区自由能中）" class="headerlink" title="伞状采样（PS:文献中纳入为分区自由能中）:"></a>伞状采样（PS:文献中纳入为分区自由能中）:</h6><p>对氨基酸残基侧链类似物（SCAs）进行了跨膜（DOPC膜）伞状采样，方法如同Martini 2.0文献中</p><h6 id="分区自由能-Partitioning-Free-Energy"><a href="#分区自由能-Partitioning-Free-Energy" class="headerlink" title="分区自由能(Partitioning Free Energy):"></a>分区自由能(Partitioning Free Energy):</h6><p>SCAs在水和油（癸烷,decane）中的分区自由能使用热力学整合的方法计算。具体的为自由能和相应误差使用GROMACS的g_bar（gmx5以上对应的为 gmx bar）分析工具。分区自由能<span class="word">ΔG</span><span class="word">part 为水中的自由能减去油中的自由能。</span></p><h6 id="二聚化自由能（Dimerization-Free-Energy）"><a href="#二聚化自由能（Dimerization-Free-Energy）" class="headerlink" title="二聚化自由能（Dimerization Free Energy）:"></a>二聚化自由能（Dimerization Free Energy）:</h6><p>也是进行一个另外一种伞状采样（大致为两个SCAs，拉动其中一个SCAs运动）。后经过如下公式计算ΔGdim:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/10/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其中kB为波尔兹曼（Boltzmann）约束，T为模拟温度，r为SCAs’ COM距离，rc 是二聚物-单体之间的cutoff（PMF达到第一个最大值的距离），Rmax是考虑的最大距离， v<span class="word">⌀为标准体积(1.66nm3，等于1mol L-1)，g(r)为径向分布函数（?回转半径？），其通过PMF可以如下计算:</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/10/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h6 id="WW肽结合力（Binding-of-WW-Peptides）"><a href="#WW肽结合力（Binding-of-WW-Peptides）" class="headerlink" title="WW肽结合力（Binding of WW Peptides）:"></a>WW肽结合力（Binding of WW Peptides）:</h6><p>WW表示的为Wimlery-White，是一个五肽，序列为Ac-WLXLL，其中X为可变残基。<span class="word">ΔG</span><span class="word">WW获得主要是通过free energy perturbation（FEP）和multiple Bennett acceptance ratio（MBAR）相互联系的方法，计算公式为:</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/10/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>zs=1.0nm,zf=4.0nm，其定义分别为POCC/water限制和bulk water限制。数值使用的Simpson’s 规则计算。相关的X残基<span class="word">ΔΔG</span><span class="word">WW</span><span class="word">(X)的计算为ΔGWW(X)减去ΔGWW(Ala)</span></p><h5 id="优化方法和实验结果"><a href="#优化方法和实验结果" class="headerlink" title="优化方法和实验结果:"></a>优化方法和实验结果:</h5><h6 id="1-改变Phe-Trp和Pro的颗粒类型"><a href="#1-改变Phe-Trp和Pro的颗粒类型" class="headerlink" title="1.改变Phe,Trp和Pro的颗粒类型"></a>1.改变Phe,Trp和Pro的颗粒类型</h6><p>作者第一个方法为通过改变Phe,Trp和Pro的颗粒类型，能够解决Martini 2.1力场中这三个原子类型疏水性太强的弱点，如下表:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/10/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其中ref为全原子模拟的结果，通过上表可以发现通过改变颗粒的类型可以使得结果有一定的提升。同时也不会影响伞状采样的结果，对于部分伞状采样的评价相比有更好的结果产生。如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/10/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h6 id="2-改变电荷偏移中心来改善电荷残基"><a href="#2-改变电荷偏移中心来改善电荷残基" class="headerlink" title="2.改变电荷偏移中心来改善电荷残基"></a>2.改变电荷偏移中心来改善电荷残基</h6><p>作者通过改变电荷偏移中心来改善电荷残基，在Martini 2.1和Martini 2.1P进行同电荷和异电荷残基的PMF实验时，结果如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/10/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以发现，在Martini 2.1种，对于带相反电荷的残基仅仅捕捉到微弱的联系，然而，全原子力场表现出非常强的联系。相反，对于相同电荷残基，Martini 2.1预测了稳定的联系，而全原子模型则相反。当使用极性水模型以后（Martini 2.1P）,库伦联系下降为1/r,同时因为CG珠子拥有更大的大小（定义的范德华力为~0.26nm）限制了其接近电荷珠子到~0.5nm。然而全原子模型可以更加的接近。</p><p>为了弥补这个问题，作者为带电侧链设计了一个替代模型，其中静电和范德华相互作用由两个不同的粒子承载。如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/10/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>两个颗粒通过一个共约束的0.11nm长的键相互联系。使用这个偏移中心的设置，在Lys-Glu联系对的情况下，电荷可能更接近，并且相互作用增加约3倍（如图2）。但Lys-Lys联系对没有得到改善。</p><p>对于其它珠子是否有改善还有待检验。</p><p>同时作者还做了以下优化，由于自己用不到，仅在这里做简单介绍:</p><ol><li>提升非极性残基使用非极性颗粒</li><li>提升骨架α螺旋和Ala和Gly多聚物序列的稳定性</li></ol><h6 id="3-在溶解肽中测试新的参数"><a href="#3-在溶解肽中测试新的参数" class="headerlink" title="3. 在溶解肽中测试新的参数"></a>3. 在溶解肽中测试新的参数</h6><p>作者进行了一条16肽的模拟（GCN4亮氨酸拉链，PDB code:2ZTA）,8号位（Lys）和12号位（Leu）残基突变为非极性的Asn，突变后的肽总共包含5个非极性氨基酸残基(<span class="word">Gln4,</span> <span class="word">Asn8,</span> <span class="word">Asn12,</span> <span class="word">Ser14,</span> <span class="word">Asn16</span>)和6个电荷残基(<span class="word">Lys3,</span> <span class="word">Glu6,</span> <span class="word">Asp7,</span> <span class="word">Glu9,</span> <span class="word">Glu10</span> <span class="word">and </span><span class="word">Lys14</span>),统计COM距离结果如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/10/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>对于非极性氨基酸残基，Martini 2.1P和Martini 2.2P之间有两个方面不同，第一点，峰在短的距离（侧链指向彼此）和长的距离（侧链远离彼此），在Martini 2.2P中转变为一个更小的平均距离，这和全原子模拟更加匹配。第二点为分布更窄（Asn12−Ser14 and Ser14−Asn16）。对于带有相反电荷残基的Lys3-Glu6和Glu11-Lys15联系对，当使用Martini 2.2P时，在短距离处观察到的峰值变得更宽或完全消失。 对于带有相反（Glu6-Asp7）和相等电荷（Glu10-Glu11）direct neighbors，用新参数对相同的方向进行采样。 对于带有相反电荷的Asp7-Glu10残基对，新方向更近的距离被采样到，从而更好地再现了全原子模拟的分布。</p><p>虽然这种特定肽的侧链的整体行为似乎已经随着我们的新模型而改善，但是也很清楚，我们的CG模型不能捕获使用原子模型时所看到的分布的一些细节。需要做更多的测试。</p><p>文章最后还提到了考虑以后二级结构可以发生转变</p><p>参考文献:</p><ol><li>de Jong D H, Singh G, Bennett W F D, et al. <strong>Improved parameters for the martini coarse-grained protein force field</strong>[J]. Journal of Chemical Theory and Computation, 2012, 9(1): 687-697.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;阅读前请注意:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;1.此文仅是我看Martini文献的一些总结，若需要使用
      
    
    </summary>
    
      <category term="分子模拟" scheme="http://kangsgo.com/categories/%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F/"/>
    
    
      <category term="gromacs" scheme="http://kangsgo.com/tags/gromacs/"/>
    
      <category term="粗粒化" scheme="http://kangsgo.com/tags/%E7%B2%97%E7%B2%92%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MARTINI 2.0力场笔记</title>
    <link href="http://kangsgo.com/770.html"/>
    <id>http://kangsgo.com/770.html</id>
    <published>2017-09-30T10:29:37.000Z</published>
    <updated>2017-10-28T03:59:18.782Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>阅读前请注意:</p><p>1.此文仅是我看Martini文献的一些总结，若需要使用Martini力场建议仔细的查看官网信息和相关文献。此文花费较大精力，若有什么意见或者建议欢迎发邮箱交流。邮箱为<strong>kangsgo@vip.qq.com  湖大-小康</strong></p><p>2.由于我只关注蛋白模拟，故只查阅了Martini力场2.0的文献以及蛋白参数文献</p><p>3.此笔记并未包含Martini力场性能测评部分，可能后续会加上<br>粗粒化（CG ）模拟在各种各样的模拟化技术中提供与全原子模型（AA model）相比更广的空间和时间尺度研究。在粗粒化模拟研究的早期一般运用在蒙特卡洛模拟上，这是一种基于概率的模拟算法，与经典模拟在理论上还是有大的差别，早期的CG模型其缺点是需要每次模拟前都进行参数的设置矫正，而Martini力场开发的初衷是更为提供一种能够进行普适应用的操作简单的力场。</p></blockquote><p>Martini的力场开发目的主要是应用于囊泡的形成，薄层相的转移，结构和膜的自组装等等，其比较关注于<strong>极性与非极性之间</strong>的相互转换/作用。Martini力场相比之前的力场模拟（2007年以前）有更多的能量”等级”和类型，与实验参数也拟合的更好，同时提供了环类物质的CG 模型的方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="力场概述（2-0版本）："><a href="#力场概述（2-0版本）：" class="headerlink" title="力场概述（2.0版本）："></a>力场概述（2.0版本）：</h5><h6 id="联系位点："><a href="#联系位点：" class="headerlink" title="联系位点："></a>联系位点：</h6><p>Maritini力场与其他CG力场一样，均为4个heavy原子用一个单一珠子所联系。珠子主要有四种主要类型。polar（P），nonpolar（N），apolar（C）和charged（Q）。同时有18种亚型，比如按照成氢键能力用单字母分为（d=donor，a=acceptor，da=both，0=none）或者指示极性（1，最低极性，5，最高极性）</p><p><strong>蛋白的原子类型:</strong></p><p>蛋白残基中侧链表示:非极性残基Leu，Pro，Ile，Val，Cys和Met用C-类型颗粒表示。非极性残基Thr，Ser，Asn和Gln通过P-类型颗粒表示，氨基酸残基带有小的负电荷侧链Glu和Asp残基用Q-类型颗粒表示。正电荷氨基酸残基Arg和Lys采用带电荷的Q类型和不带电荷颗粒组成。带环芳香烃残基通过三（His，Phe和Tyr）或者四（Trp）个珠子来表示特别的环颗粒。Gly和Ala残基仅仅设置骨架颗粒。骨架参数依赖二级结构，如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在溶液中或者无规卷曲或者弯曲中，骨架拥有非常强的极性特征（P类型），在部分螺旋或者β折叠中，内部骨架键减少了极性特征的放大（N类型）。辅氨酸是低极性的因为其缺乏氢键供体能力。其全原子映射结果如下表:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h6 id="非键联系："><a href="#非键联系：" class="headerlink" title="非键联系："></a>非键联系：</h6><p>首先是Lennard-Jones(LJ)12-6势，公式如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/1-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其中r为原子对距离，ε(字母代考)与σ为势能参数，因原子的种类而异，具体可以查看陈正隆老师的分子模拟一书。在martini力场中统一为σ=0.47nm，除了两个特别的类rings和antifreeze以外,还有一个例外就是Q类型和大多数极性类型 ，其C1和C2 斥力σ范围扩展为0.62nm。这个变化利于带电粒子在非极性介质中利于生成水化层。完整的参数数据如下表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>除了LJ势能以外，电荷组（类型Q）还有完整的qi,j联系，通过库能势：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>库能势与之前的比较准确性略有降低，主要是为了和之前的模型相比平衡增加的疏水强度。εr(字母代考)相对介电常数为15，与之前相比略微降低。</p><h6 id="键联系："><a href="#键联系：" class="headerlink" title="键联系："></a>键联系：</h6><p>键的描述和上一个版本相比没有升级，主要还是微弱的简谐振动提供的。此项在陈正隆老师的书籍版本中译为键伸缩势能项。平均键长与σ相同，为0.47nm，约束力为Kbond=1250Kj*mol-1，公式如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>键角的简谐震荡项，参数依据为与全原子模型相互比较,计算公式如下：<br>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>一般情况下Kangle=25KJmol-1，θ0=180°，在涉及<span class="word">cis</span> <span class="word">double </span><span class="word">bond时，参数为Kangle=45KJmol-1（之前参数为35KJmol-1</span><span class="word">），θ0=120°，因为和全原子相比联系过于微弱。</span></p><p><strong>蛋白的键联系:</strong></p><p>蛋白的键长，键角，二面角和他们各自的力场约束统计起来作为键参数的参考。这些参数来源于PDB库中近2000个蛋白作为数据集。蛋白的二级结构来源于DSSP项目。计算的键长，键角和二面角如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>PDB数据库中的参数分布如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h6 id="环化物参数"><a href="#环化物参数" class="headerlink" title="环化物参数:"></a>环化物参数:</h6><p>对于环化物，4个原子称为1个珠子是不怎么适用的，最佳为2个或者3个位1个珠子，具体可以查看文章中给的环己烷，苯环等的例子。由于会照成很大CG珠子密度，因此这些参数需要差别对待。特别的设置标签为“S”,其LJ势能的σ也是不同的，σ=0.43nm,ε(字母代考)缩小至75%。环的话<strong>分子内的</strong>LJ不适合该体系，而更换improper dihedral angle势来合理的解释。其公式如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="word">θ的角度由i,j,k和j,k,l构成，θid则为平均角度，力场约束为Kid。</span></p><h6 id="二面角（dihedral-angle）参数-蛋白"><a href="#二面角（dihedral-angle）参数-蛋白" class="headerlink" title="二面角（dihedral angle）参数(蛋白):"></a>二面角（dihedral angle）参数(蛋白):</h6><p>对于氨基酸残基还有两个二面角势,其中improper 二面角势 Vid主要被用来阻止平面组的面外扭曲。Proper二面势Vd被使用来约束肽骨架的二级结构。这是一个非常重要的点，因此，若有蛋白序列二级结构的改变是不适合这个模型的（分别为公式5,6），公式如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>二面角参数仅仅在四个联系的珠子拥有相同的二级结构（螺旋或者延长(extended)），下表统计了所有侧链的键长和联系约束。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>键角统计如下表:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/13-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h6 id="抗凝剂参数"><a href="#抗凝剂参数" class="headerlink" title="抗凝剂参数:"></a>抗凝剂参数:</h6><p>由于水模型是P4颗粒，相对于真实的水更容易freezing，故需要Antifreez参数。CG 水在280到300K可能会freezes。freezing是一个核驱动的过程，一般CG水能够保留其流动性(fluid)非常长的时间，但是一旦成核形成，将会很快速的形成，在固态表面甚至膜表面可能都会加速水的freeze。若研究更低温度同样如此，故需要增加水的无序程度。引入抗凝剂BigP4，LJ参数从0.47nm改为0.57nm，为了避免相的分离，BP4-P4联系上升为等级“O”。其他按照正常颗粒。当加入抗凝剂以后会对液体平衡性产生一定的影响,但作者对膜水体系进行分析，发现在膜表面积，形成gel phase的转移温度，膜分子的横向扩散长度都没有很大的影响，故认为为可接受范围之内。</p><h6 id="模拟参数"><a href="#模拟参数" class="headerlink" title="模拟参数:"></a>模拟参数:</h6><p>对于模拟参数，非键联系的cut off距离设置为rcut=1.2nm。为了避免产生不必要的噪音，使用GROMACS 的标准偏移功能，<strong>其中能量和约束力设置在截止距离处消失</strong>。LJ势能的偏移从rshift=0.9nm到rcut。静电势偏移从rshift=0.0nm到rcut。静电势的偏移会对模拟距离依赖性的screening<strong>造成影响</strong>。neighbor list可以升到10 steps， <span class="word">neighbor</span> <span class="word">list</span> <span class="word">cutoff设置等于rcut。模拟步长可以升至dt=40fs。当然设置成25fs到30fs可能会更加稳定。选择时间步长的不同对自由能有一定的影响，影响约为5%。（从40到5fs），所以说影响不是很大。</span></p><p>对于粗粒化模拟时间因子一般扩大为2到10倍，文献中默认的时间因子为4（注:文献1如是说，文献3说的为2到8倍，但时间因子均说的为4），即CG模型模拟10ns，实际上相当于现实中40ns，可以粗略的乘以4。产生这个现象的原因是CG模型相对于AA模型联系更加的平滑。</p><p><strong>蛋白模拟:</strong></p><p>文献中提供的作者使用的模拟参数如下，<strong>可能和官网的有出入，毕竟时间和版本较久（文献中的gromacs为3.3），故以下内容是过时的，仅供参考和笔记作用。</strong></p><ul><li>拓扑文件使用官网的脚本</li><li>每个组（lipids，water 和proteins）的温度算法采用Berendsen温度耦合算法，时间为1ps</li><li>使用Berendsen算法进行半均匀（ <span class="word">Semi-isotropic</span>）压力耦合，大气压为1bar任意的在膜平面上且垂直于膜，使用的时间约束为5.0ps，压缩率为4.5*10-5 bar-1</li><li>芳香氨基酸残基Val，Ile和Thr侧链和骨架侧链键使用的约束算法为LINCS算法，主要是为了避免快速波动（fluctuations，看到这个单词是否想到了RMSF?）所造成的大量的不稳定现象的发生。</li><li>neighbor list 设置为10 steps，neighbor list cutoff等于rcut=1.2nm和其他设置为一样</li><li>由于计算影响的原因（猜测是为了更快），所有的珠子设置的相对质量为72，依据为4个水分子，对于环（ring）结构，相对质量设置为45</li><li>时间尺度和前面一样，时间因子为4，即25fs相当于有效时间100fs，当然这个估计是不精确的，故需要进行精确时间的模拟计算是行不通的，但是精确模拟计算运用是较少的,故对于研究扩散的时候要特别小心，即时有些扩散的CG模型研究与实验吻合较好。</li></ul><h5 id="拓扑中离子需要注意"><a href="#拓扑中离子需要注意" class="headerlink" title="拓扑中离子需要注意:"></a>拓扑中离子需要注意:</h5><p>对于粒子，考虑到AA力场对ions难度已经很大，CG ion力场仅在定性上准确。</p><p>这段我也不是很懂，原文如下:</p><p><strong>Keeping in mind the difficulty of model-ing of ions already with AA force fields, the CG ion force field is only qualitatively accurate</strong></p><h5 id="Martini力场性能测评部分结果"><a href="#Martini力场性能测评部分结果" class="headerlink" title="Martini力场性能测评部分结果:"></a>Martini力场性能测评部分结果:</h5><h6 id="氨基酸残基侧链在DOPC膜上跨膜研究"><a href="#氨基酸残基侧链在DOPC膜上跨膜研究" class="headerlink" title="氨基酸残基侧链在DOPC膜上跨膜研究"></a>氨基酸残基侧链在DOPC膜上跨膜研究</h6><p>对不同侧链从DOPC膜中拉出（PMF）研究，将CG模型和全原子模型进行比较，研究结果表明疏水性氨基酸与全原子模拟相比有非常好的吻合，特别是barrier方面。如图中的leucine，isoleucine和valine。对于tryptophan和tyrosine，barrier在全原子profiles中不存在，且在CGprofiles低于5KJ/mol。且最小区域和全原子模拟拟合较好。对于极性氨基酸残基，对于全原子模型和CG模型，也有合理的分布。电荷残基在全原子模拟和CG模拟之间显示了非常大的不同。对于CG模型，其在进入膜中的自由能惩罚被严重低估，但是还是仍然高的（glu，asp和arg超过40，lys超过35）进入膜的数量是可以忽略不计的，换而言之其对于入膜这个时间是没有影响的，但是其他影响是有可能的，这也是力场需要改进的地方。完整的PMF结果如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/14-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>但是需要注意的是与其相比较的全原子力场为OPLSAA力场，OPLSAA在全原子力场中对于蛋白的表现也并不是那么的好，其对于蛋白是用的老的amber力场，且开发的人较少，长时间未开发（来源:GROMACS中文组-李继存老师）</p><h6 id="氨基酸残基联系常数"><a href="#氨基酸残基联系常数" class="headerlink" title="氨基酸残基联系常数:"></a>氨基酸残基联系常数:</h6><p>氨基酸残基i和j的定义如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其中1 / C是校正系统中物种浓度的因子,P(x)是在X状态下找到的概率。其中<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>，NA是Avogadro’s 数，V是盒子的体积。bound和unbound状态通过计算复合物溶液可及表面（solvent accessible surface area ASA）的不同。当ASA低于阈值的话表示两个残基是联系的，若高出阈值则定义为不联系，阈值的选择来自ASA的直方图分布。得到的结果如下表:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以发现CG模型和全原子模拟的比例是一样的，但是CG模型较全原子模型数值有低估。</p><h5 id="Martini力场的限制"><a href="#Martini力场的限制" class="headerlink" title="Martini力场的限制:"></a>Martini力场的限制:</h5><p>1.参数对于固体相并不是那么准确，相比液体相来说固体和气体相显得太稳定</p><p>2.内在熵变会丢失，温度依赖性受到了影响。Martini模型，也许在大多数CG方法中一样遇到的另一个困难是将极性和带电荷的化合物分配成低介电常数。因为极性物质的相互作用强度在非极性环境中会被低估。</p><p>3.由于开发的初衷是涉及在非极性环境中形成极性/带电复合物的应用尤其容易受到影响</p><p>4.忽略了长程电荷力是另一个限制，<strong>超过1.2nm的长程电荷不会被统计！</strong>但原则上是可以增加长程电荷的，必须认识到，静电相互作用方案的改进可能影响其他性质，例如每个脂质的面积或自发曲率</p><p>5.由于氨基酸残基二面角的存在，<strong>使得蛋白的二级结构无法改变</strong>，进行模拟的前提之一是蛋白二级结构是没有变化的，若需要查看二级结构的变化，可以使用Go模型。具体可以查看参考文献2.</p><p>由于这些限制，个人看法Martini力场还是有很多可以开发和提升的地方，这个力场还是很不是完美，<strong>特别是对于带电性质的研究，Martini力场可能是不可行的，有许多需要做的工作来进行完善，否则很难得到自己想要得到的结果！</strong></p><p>最后更新于2017-9-30</p><p>参考文献:</p><ol><li>Marrink S J, Risselada H J, Yefimov S, et al. <strong>The MARTINI force field: coarse grained model for biomolecular simulations</strong>[J]. The journal of physical chemistry B, 2007, 111(27): 7812-7824.</li><li>Go N, Taketomi H. Respective roles of short-and long-range interactions in protein folding[J]. Proceedings of the National Academy of Sciences, 1978, 75(2): 559-563.</li><li>Monticelli L, Kandasamy S K, Periole X, et al. <strong>The MARTINI coarse-grained force field: extension to proteins</strong>[J]. Journal of chemical theory and computation, 2008, 4(5): 819-834.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;阅读前请注意:&lt;/p&gt;
&lt;p&gt;1.此文仅是我看Martini文献的一些总结，若需要使用Martini力场建议仔细的查看官网信息和相关文献。此文花费较大精力，若有什么意见或者建议欢迎发邮箱交流。邮箱为&lt;strong&gt;kangsgo@vip.qq.co
      
    
    </summary>
    
      <category term="分子模拟" scheme="http://kangsgo.com/categories/%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F/"/>
    
    
      <category term="gromacs" scheme="http://kangsgo.com/tags/gromacs/"/>
    
      <category term="粗粒化" scheme="http://kangsgo.com/tags/%E7%B2%97%E7%B2%92%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>[转载]ubuntu16耳机没声音解决</title>
    <link href="http://kangsgo.com/766.html"/>
    <id>http://kangsgo.com/766.html</id>
    <published>2017-09-24T05:08:02.000Z</published>
    <updated>2017-10-29T03:33:30.922Z</updated>
    
    <content type="html"><![CDATA[<p>本文转自:小ks强博客的<a href="http://www.cnblogs.com/kingstrong/p/5960466.html" target="_blank" rel="external">ubuntu16耳机没声音解决</a></p><p>由于需要用到GPU显卡用于 gromacs计算，但是装了CUDA驱动后就没有声音了，网上很多办法都没解决，今天看到这个方法完美解决</p><p>首先用在终端输入如下命令，安装pulseaudio音量控制软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install pavucontrol</div></pre></td></tr></table></figure><p>终端输入指令pavucontrol，在配置中将HDA NVIDIA设置为关，下面设置为模拟立体声双工，如下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后在输出设备中选择模拟耳机，就可以听到声音啦</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/09/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文转自:小ks强博客的&lt;a href=&quot;http://www.cnblogs.com/kingstrong/p/5960466.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ubuntu16耳机没声音解决&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于需要用到GP
      
    
    </summary>
    
      <category term="杂项" scheme="http://kangsgo.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>VMD可视化粗粒化力场简单介绍</title>
    <link href="http://kangsgo.com/759.html"/>
    <id>http://kangsgo.com/759.html</id>
    <published>2017-09-23T04:22:18.000Z</published>
    <updated>2017-10-28T03:26:25.393Z</updated>
    
    <content type="html"><![CDATA[<p>此篇文章是简单的归纳总结官网的<a href="http://www.cgmartini.nl/index.php/tools2/visualization" target="_blank" rel="external">Rendering CG bonds &amp; constraints with VMD</a>, 查看的时候的时间为16 August 2017，请注意时效性。</p><p>该脚本分为两个版本，一个是<a href="http://www.cgmartini.nl/images/tools/VMD/cg_bonds.tcl" target="_blank" rel="external">gromacs5</a>以前版本，一个是<a href="http://www.cgmartini.nl/images/tools/VMD/cg_bonds-v5.tcl" target="_blank" rel="external">gromacs5</a>版本（包括2016），以下均以cg_bonds-v5.tcl为例</p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><p>使用的方法与VMD其他脚本类似，即source一下即可</p><blockquote><p>source /path/to/cg_bonds-v5.tcl</p></blockquote><p>现在脚本可以通过-top设置来读入.top和.itp文件</p><h4 id="cg-bonds："><a href="#cg-bonds：" class="headerlink" title="cg_bonds："></a>cg_bonds：</h4><p>-molid   “top”     VMD-defined ID of the molecule to process</p><p>-gmx      /usr/bin/gmxdump   gmxdump绝对路径的执行脚本，对于版本5，默认的为/usr/bin/gmx</p><p>-tpr         topol.tpr    顾名思义</p><p>-top         topol.top    顾名思义</p><p>-topoltype  “martini”    蛋白拓扑类型:”martini”,”elastic”,”elnedyn”</p><p>-net          “martini”       绘制网络:”martini”,”elastic”,”both”</p><p>-bndrcnstr    “both”       绘制键和/或约束”bonds”,”constraints”,”both”</p><p>-cutoff            7.0           键截距（埃）</p><p>-color           “red”           颜色名称或者VMD定义ID对于elastic 键</p><p>-mat              “Opaque”       对于elnedyn键的材料</p><p>-rad               0.2               elastic键半径</p><p>-res                6                 elastic键分辨率</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">user@machine $ vmd protein.gro</div><div class="line">vmd &gt;  source /home/user/scripts/cg_bonds.tcl</div><div class="line">vmd &gt;  cg_bonds -top system.top -topoltype “elastic”</div><div class="line">vmd &gt;  cg_bonds -gmx /home/user/bin/gmx-4.5.4/bin/gmxdump -tpr dyn.tpr -net “elastic” -cutoff 12.0 -color “orange” -mat “AOChalky” -res 12 -rad 0.1 -topoltype “elastic”</div><div class="line">vmd &gt; cg_delete_elastic_bonds</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此篇文章是简单的归纳总结官网的&lt;a href=&quot;http://www.cgmartini.nl/index.php/tools2/visualization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rendering CG bonds &amp;amp; c
      
    
    </summary>
    
      <category term="绘图与可视化" scheme="http://kangsgo.com/categories/%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="粗粒化" scheme="http://kangsgo.com/tags/%E7%B2%97%E7%B2%92%E5%8C%96/"/>
    
      <category term="VMD" scheme="http://kangsgo.com/tags/VMD/"/>
    
  </entry>
  
  <entry>
    <title>不同软件中参数单位</title>
    <link href="http://kangsgo.com/755.html"/>
    <id>http://kangsgo.com/755.html</id>
    <published>2017-09-21T04:49:47.000Z</published>
    <updated>2017-10-18T12:17:14.231Z</updated>
    
    <content type="html"><![CDATA[<p>看了贾壮老师的博文<a href="http://kangsgo.com/725.html">Gromacs中添加CHARMM力场</a>发现不同软件的力场数值是不一样的，进一步分析可以发现就是单位的变化导致的，所以在这里总（chao）结（xi）常用的力场软件使用的单位。</p><p>以下是常用的单元系统</p><p>UnitSystem         Length unit     Mass unit     Time unit     Charge unit  Temperature    Amount unit   Energy unit</p><p>si_unit_system          meters           kilograms        second        Ampere         Kelvin                  mole              joule</p><p>cgs_unit_system      centimeters      gram              second       Ampere          Kelvin                   mole          1e-7 joule</p><p>md_unit_system     nanometers      daltons       picosecond    q electron      Kelvin                    mole             kilojoule</p><p>planck_unit_system     pl. length     pl.  mass    pl.  time     pl. charge   pl. temperature         item               pl. energy</p><p>akma_unit_system     angstroms      daltons       akma time    q  electron    Kelvin                   mole              kilocalorie</p><p>以下为常用软件以及其单元系统:</p><p>软 件                              单元系统</p><p>AMBER                          akma_unit_system</p><p>CHARMM                       akma_unit_system</p><p>Tinker                           akma_unit_system</p><p>Desmond                       akma_unit_system</p><p>LAMMPS                        akma_unit_system</p><p>NAMD                            akma_unit_system</p><p>AceMD                           akma_unit_system</p><p>OpenMM                          md_unit_system</p><p>Gromacs                          md_unit_system</p><p>Gromos                            md_unit_system</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看了贾壮老师的博文&lt;a href=&quot;http://kangsgo.com/725.html&quot;&gt;Gromacs中添加CHARMM力场&lt;/a&gt;发现不同软件的力场数值是不一样的，进一步分析可以发现就是单位的变化导致的，所以在这里总（chao）结（xi）常用的力场软件使用的单位。&lt;
      
    
    </summary>
    
      <category term="分子模拟" scheme="http://kangsgo.com/categories/%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>linux安装GAUSSIAN 09（G09）和GVIEW简略版</title>
    <link href="http://kangsgo.com/83.html"/>
    <id>http://kangsgo.com/83.html</id>
    <published>2017-09-13T09:50:28.000Z</published>
    <updated>2017-10-28T04:02:32.844Z</updated>
    
    <content type="html"><![CDATA[<p>首发时间: 2015年12月9日</p><p>更新时间:2017年9月13日</p><h3 id="一、安装Linux版Gaussian"><a href="#一、安装Linux版Gaussian" class="headerlink" title="一、安装Linux版Gaussian"></a>一、安装Linux版Gaussian</h3><p>例如安装在<strong>/home/kangsgo/install/g09</strong>下，下同</p><p>首先解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">unzip gaosi09-D01.zip</div><div class="line"></div><div class="line">mv g09D01 g09</div><div class="line"></div><div class="line"><span class="built_in">cd</span> g09</div><div class="line"></div><div class="line">mkdir scratch</div><div class="line"></div><div class="line">gedit ~/.bashrc</div></pre></td></tr></table></figure><p>在里面加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> g09root=/home/kangsgo/install</div><div class="line"><span class="built_in">export</span> GAUSS_SCRDIR=/home/kangsgo/install/g09/scratch</div><div class="line"><span class="built_in">source</span> /home/kangsgo/install/g09/bsd/g09.profile</div></pre></td></tr></table></figure><p>接下来可以在/home/kangsgo/g09/Default.Route中设置默认参数（需要自己创建），如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-M- 12000MB</div><div class="line">-P- 8</div></pre></td></tr></table></figure><p>在<strong>/home/kangsgo/install/g09/</strong>目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 750 -R *</div><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure><p>大工告成！</p><p>本段来自于：<a href="http://bbs.keinsci.com/thread-5493-1-1.html" target="_blank" rel="external">计算化学公社</a></p><h3 id="二、安装gview"><a href="#二、安装gview" class="headerlink" title="二、安装gview"></a>二、安装gview</h3><p>在.bashrc末尾加上以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GV_DIR=/home/kangsgo/install/g09/gv/</div><div class="line"><span class="built_in">export</span> LIBPATH=/home/kangsgo/install/g09/gv/lib</div><div class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/home/kangsgo/install/g09/gv/lib</div><div class="line">PATH=<span class="variable">$PATH</span>:/home/kangsgo/install/g09/gv/</div></pre></td></tr></table></figure><p>转载自：<a href="http://bbs.keinsci.com/thread-5493-1-1.html" target="_blank" rel="external">计算化学公社</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首发时间: 2015年12月9日&lt;/p&gt;
&lt;p&gt;更新时间:2017年9月13日&lt;/p&gt;
&lt;h3 id=&quot;一、安装Linux版Gaussian&quot;&gt;&lt;a href=&quot;#一、安装Linux版Gaussian&quot; class=&quot;headerlink&quot; title=&quot;一、安装Linux
      
    
    </summary>
    
      <category term="分子模拟" scheme="http://kangsgo.com/categories/%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F/"/>
    
    
      <category term="软件安装" scheme="http://kangsgo.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
      <category term="Gaussian" scheme="http://kangsgo.com/tags/Gaussian/"/>
    
  </entry>
  
  <entry>
    <title>amber非标准残基生成的小坑</title>
    <link href="http://kangsgo.com/748.html"/>
    <id>http://kangsgo.com/748.html</id>
    <published>2017-09-13T07:10:59.000Z</published>
    <updated>2017-12-10T03:02:17.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gromacs非标准残基构建"><a href="#Gromacs非标准残基构建" class="headerlink" title="Gromacs非标准残基构建"></a>Gromacs非标准残基构建</h1><p>李老师其实已经有非常详细的实例来讲解如何进行<a href="http://jerkwin.github.io/2017/09/20/GROMACS%E9%9D%9E%E6%A0%87%E5%87%86%E6%AE%8B%E5%9F%BA%E6%95%99%E7%A8%8B2-%E8%8A%8B%E8%9E%BA%E6%AF%92%E7%B4%A0%E5%B0%8F%E8%82%BD%E5%AE%9E%E4%BE%8B/" target="_blank" rel="external">非标准残基</a>的搭建方法，此方法是之前根据李老师的方法结合<a href="http://ambermd.org/tutorials/basic/tutorial5/index.htm" target="_blank" rel="external">amber教程</a>进行改编的方法，可以作为参考。</p><p>我们使用ser磷酸化的蛋白作为实验，由于还未发表文章，暂时不提供示例步骤下载。若有问题可以邮件联系我交流：kangsgo#vip.qq.com</p><h3 id="1-单独保存非标准残基"><a href="#1-单独保存非标准残基" class="headerlink" title="1.单独保存非标准残基"></a>1.单独保存非标准残基</h3><p>我们首先使用pymol将sep独立导出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select <span class="keyword">not</span> resn SEP</div><div class="line">remove sele</div></pre></td></tr></table></figure></p><p>将其保存为sep.pdb文件，当然也可以直接用<code>gedit</code>等打开文件，将SEP部分（HETAM）copy导出</p><p>sep文件内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ATOM      1  N   SEP A 219      10.386  -7.407  38.687  1.00 31.68           N  </div><div class="line">ATOM      2  CA  SEP A 219      10.979  -8.567  39.325  1.00 31.58           C  </div><div class="line">ATOM      3  C   SEP A 219      12.450  -8.306  39.481  1.00 28.97           C  </div><div class="line">ATOM      4  O   SEP A 219      13.189  -8.279  38.504  1.00 28.84           O  </div><div class="line">ATOM      5  CB  SEP A 219      10.724  -9.808  38.495  1.00  0.00           C  </div><div class="line">ATOM      6  OG  SEP A 219      11.474 -10.889  39.010  1.00  0.00           O  </div><div class="line">ATOM      7  P   SEP A 219      11.419 -12.337  38.313  1.00  0.00           P1+</div><div class="line">ATOM      8  O2P SEP A 219      12.339 -13.139  39.147  1.00  0.00           O1-</div><div class="line">ATOM      9  O1P SEP A 219       9.990 -12.703  38.422  1.00  0.00           O1-</div><div class="line">ATOM     10  O3P SEP A 219      11.893 -12.061  36.938  1.00  0.00           O1-</div><div class="line">ATOM     11  H   SEP A 219      10.767  -7.078  37.811  1.00 31.68           H  </div><div class="line">ATOM     12  HA  SEP A 219      10.534  -8.738  40.305  1.00 31.58           H  </div><div class="line">ATOM     13  HB2 SEP A 219       9.662 -10.058  38.502  1.00  0.00           H  </div><div class="line">ATOM     14  HB3 SEP A 219      11.035  -9.614  37.467  1.00  0.00           H</div></pre></td></tr></table></figure></p><p>不难看出带的电荷为-2</p><p>我们需要补全两端的氢键(封端)，我是用gview补全的，也可以用pymol,chimera等补全，但是需要注意的是要查看补全的氢键是否正确，我在chimera上补全的氢键就有问题，对于补全氢键，个人的经验觉得正确度排序为:gv&gt;chimera&gt;pymol</p><p>补全后如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">HETATM    1  N   SEP A 219      10.386  -7.407  38.687                       N</div><div class="line">HETATM    2  CA  SEP A 219      10.979  -8.567  39.325                       C</div><div class="line">HETATM    3  C   SEP A 219      12.450  -8.306  39.481                       C</div><div class="line">HETATM    4  O   SEP A 219      13.189  -8.279  38.504                       O</div><div class="line">HETATM    5  CB  SEP A 219      10.724  -9.808  38.495                       C</div><div class="line">HETATM    6  OG  SEP A 219      11.474 -10.889  39.010                       O</div><div class="line">HETATM    7  P   SEP A 219      11.419 -12.337  38.313                       P</div><div class="line">HETATM    8  O2P SEP A 219      12.339 -13.139  39.147                       O</div><div class="line">HETATM    9  O1P SEP A 219       9.990 -12.703  38.422                       O</div><div class="line">HETATM   10  O3P SEP A 219      11.893 -12.061  36.938                       O</div><div class="line">HETATM   11  H   SEP A 219      10.767  -7.078  37.811                       H</div><div class="line">HETATM   12  HA  SEP A 219      10.534  -8.738  40.305                       H</div><div class="line">HETATM   13  HB2 SEP A 219       9.662 -10.058  38.502                       H</div><div class="line">HETATM   14  HB3 SEP A 219      11.035  -9.614  37.467                       H</div><div class="line">HETATM   15 2H   SEP A 219      10.544  -6.657  39.329                       H</div><div class="line">HETATM   16  H   SEP A 219      12.857  -8.142  40.457                       H</div><div class="line">TER      16      SEP A 219</div><div class="line">END</div><div class="line">CONECT    1    2   11   15</div><div class="line">CONECT    2    1    3    5   12</div><div class="line">CONECT    3    2    4   16</div><div class="line">CONECT    4    3</div><div class="line">CONECT    5    2    6   13   14</div><div class="line">CONECT    6    5    7</div><div class="line">CONECT    7    6    8    9   10</div><div class="line">CONECT    8    7</div><div class="line">CONECT    9    7</div><div class="line">CONECT   10    7</div><div class="line">CONECT   11    1</div><div class="line">CONECT   12    2</div><div class="line">CONECT   13    5</div><div class="line">CONECT   14    5</div><div class="line">CONECT   15    1</div><div class="line">CONECT   16    3</div></pre></td></tr></table></figure></p><h3 id="2-制作高斯输入文件"><a href="#2-制作高斯输入文件" class="headerlink" title="2.制作高斯输入文件"></a>2.制作高斯输入文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">antechamber -<span class="keyword">fi</span> pdb -i sep.pdb -fo gcrt -o sep.gjf -ch <span class="string">"sep.chk"</span> -gm <span class="string">"%mem=2048MB"</span> -gn <span class="string">"%nproc=4"</span> -nc -2</div></pre></td></tr></table></figure><p>如果按照李老师的方法还需要使用-ge 生成高斯esp文件，通过iop(6/50=1)，可以参考下面一条命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">antechamber -<span class="keyword">fi</span> pdb -i sep.pdb  -o ligand.gjf -fo gcrt -pf y -gn <span class="string">"%nproc=8"</span> -gm <span class="string">"%mem=1000MB"</span> -ch <span class="string">"ligand"</span> -gk <span class="string">"#HF/6-31G* SCF=tight Test Pop=MK iop(6/33=2) iop(6/42=6) iop(6/50=1) opt"</span> -ge ligand.gesp -gv 1</div></pre></td></tr></table></figure></p><p>命令解释如下:<br><code>-fi</code>为输入格式<br><code>-i</code>为输入文件<br><code>-fo</code>为输出文件格式 gcrt为高斯gjf格式<br><code>-ch</code>为高斯chk文件<br><code>-gm -gn</code>为使用内存和核数<br><code>-nc</code> 为电荷数</p><h3 id="3-转化为gromacs文件"><a href="#3-转化为gromacs文件" class="headerlink" title="3.转化为gromacs文件"></a>3.转化为gromacs文件</h3><p>实际上与蛋白配体中的小分子制作方式是一样的，首先在这里下载<a href="http://svn.code.sf.net/p/ccpn/code/branches/stable/ccpn/python/acpype/" target="_blank" rel="external">ACPYPE</a>，注意需要下载<strong>sf版本</strong>,否则而面角的表达方式不对，首先生成mol2文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">antechamber -<span class="keyword">fi</span> gout -i sep.log -rn SEP -fo mol2 -o sep.mol2 -c resp -pf y -at amber</div></pre></td></tr></table></figure></p><p>在这里最好修改一下原子名称，改成与sep.pdb对应，且需要对其进行修改，因为gromacs加氢从1开始，故将HB2,HB3改为HB1,HB2<br>最后的结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">@&lt;TRIPOS&gt;ATOM</div><div class="line">      1 N            3.0030    -1.1500     0.1620 N         1 SEP      -1.141452</div><div class="line">      2 CA           1.8370    -0.4940    -0.4350 CT         1 SEP       0.462377</div><div class="line">      3 C            1.8020     0.9980    -0.1460 C          1 SEP       0.457721</div><div class="line">      4 O            2.8040     1.5940     0.1700 O          1 SEP      -0.633121</div><div class="line">      5 CB           0.5190    -1.1870    -0.0550 CT         1 SEP       0.192426</div><div class="line">      6 OG          -0.5100    -0.6800    -0.7990 OS         1 SEP      -0.641051</div><div class="line">      7 P           -1.7850     0.1390     0.0880 P          1 SEP       1.339193</div><div class="line">      8 O2P         -2.7260     0.5020    -1.0190 O2         1 SEP      -0.920441</div><div class="line">      9 O1P         -2.2370    -0.9110     1.0650 O2         1 SEP      -0.920441</div><div class="line">     10 O3P         -1.0110     1.2850     0.7110 O2         1 SEP      -0.920441</div><div class="line">     11 H            2.7710    -1.3680     1.1160 H          1 SEP       0.367588</div><div class="line">     12 HA           1.9150    -0.5690    -1.5210 H1         1 SEP      -0.041482</div><div class="line">     13 HB1          0.6570    -2.2570    -0.2470 H1         1 SEP      -0.007243</div><div class="line">     14 HB2          0.3490    -1.0790     1.0140 H1         1 SEP      -0.007243</div><div class="line">     15 H2           3.7290    -0.4600     0.2230 H          1 SEP       0.367588</div><div class="line">     16 H1           0.8340     1.4820    -0.2400 HA         1 SEP       0.046022</div><div class="line">....</div></pre></td></tr></table></figure></p><p>生成的mol2文件使用<code>parmchk2</code>进行补全参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parmchk2 -i sep.mol2 -f mol2 -o sep.frcmod</div></pre></td></tr></table></figure></p><p>创建<code>leap.in</code>文件，输入如下内容（注意sep修改成自己的名称）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">source leaprc.ff99SBildn</div><div class="line">source leaprc.gaff</div><div class="line">loadamberparams sep.frcmod</div><div class="line">lig=loadmol2 sep.mol2</div><div class="line">check lig</div><div class="line">saveamberparm lig sep.prmtop sep.inpcrd</div><div class="line">quit</div></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tleap -f leap.in</div></pre></td></tr></table></figure></p><p>运行acpype<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python2.7 acpype.py -p sep.prmtop -x sep.inpcrd -d</div></pre></td></tr></table></figure></p><p>将会生成<code>SEP_GMX.top</code>和<code>SEP_GMX.gro</code>两个文件，其中<code>SEP_GMX.gro</code>我们用不着</p><h3 id="4-整理残基的rtp条目"><a href="#4-整理残基的rtp条目" class="headerlink" title="4.整理残基的rtp条目"></a>4.整理残基的rtp条目</h3><p>为了保存力场<code>rtp</code>信息，我们需要创建一个<code>sep.rtp</code>文件<br>我们需要对<code>SEP_GMX.gro</code>文件进行整理，即把虚拟的原子电荷附加到N端头和C端尾部的位置。<br>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[ atoms ]</div><div class="line">;   nr  type  resi  res  atom  cgnr     charge      mass       ; qtot   bond_type</div><div class="line">     1    N     1   SEP     N    1    -1.141453     14.01000 ; qtot -1.141</div><div class="line">     2   CT     1   SEP    CA    2     0.462377     12.01000 ; qtot -0.679</div><div class="line">     3    C     1   SEP     C    3     0.457721     12.01000 ; qtot -0.221</div><div class="line">     4    O     1   SEP     O    4    -0.633122     16.00000 ; qtot -0.854</div><div class="line">     5   CT     1   SEP    CB    5     0.192426     12.01000 ; qtot -0.662</div><div class="line">     6   OS     1   SEP    OG    6    -0.641052     16.00000 ; qtot -1.303</div><div class="line">     7    P     1   SEP     P    7     1.339196     30.97000 ; qtot 0.036</div><div class="line">     8   O2     1   SEP   O2P    8    -0.920442     16.00000 ; qtot -0.884</div><div class="line">     9   O2     1   SEP   O1P    9    -0.920442     16.00000 ; qtot -1.805</div><div class="line">    10   O2     1   SEP   O3P   10    -0.920442     16.00000 ; qtot -2.725</div><div class="line">    11    H     1   SEP     H   11     0.367588      1.00800 ; qtot -2.358</div><div class="line">    12   H1     1   SEP    HA   12    -0.041482      1.00800 ; qtot -2.399</div><div class="line">    13   H1     1   SEP   HB1   13    -0.007243      1.00800 ; qtot -2.406</div><div class="line">    14   H1     1   SEP   HB2   14    -0.007243      1.00800 ; qtot -2.414</div><div class="line">    15    H     1   SEP    H2   15     0.367588      1.00800 ; qtot -2.046</div><div class="line">    16   HA     1   SEP    H1   16     0.046022      1.00800 ; qtot -2.000</div></pre></td></tr></table></figure></p><p>1 N的电荷应该变为-1.141453+0.367588<br>3 C的电荷应该变为0.457721+0.046022</p><p>然后用我写的<a href="/images/2017/12/rtp.py">脚本</a>进行内容的提取:<br>首先创建<code>config.txt</code>文件，在其中写入需要删除的虚拟原子(每一行一个)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">H</div><div class="line">HA</div></pre></td></tr></table></figure></p><p>然后运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python rtp.py SEP_GMX.top SEP&gt;data.txt</div></pre></td></tr></table></figure></p><p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[ bondedtypes ]</div><div class="line">; bonds  angles  dihedrals  impropers all_dihedrals nrexcl HH14 RemoveDih</div><div class="line">     1       1          9          4        1         3      1     0</div><div class="line">[ SEP ]</div><div class="line"> [ atoms ]</div><div class="line">      N     N         -0.773865     1</div><div class="line">...</div><div class="line"> [ bonds ]</div><div class="line">      N    CA        1.4620e-01     2.7506e+05</div><div class="line">      N     H        1.0130e-01     3.3740e+05</div><div class="line">     CA     C        1.5240e-01     2.6192e+05</div><div class="line">...</div><div class="line"> [ angles ]</div><div class="line">      N    CA     C      1.0906e+02        5.6066e+02</div><div class="line">      N    CA    CB      1.1161e+02        5.5153e+02</div><div class="line">      N    CA    HA      1.0888e+02        4.1706e+02</div><div class="line">     CA     N     H      1.1768e+02        3.8325e+02</div><div class="line">     CA     C     O      1.2320e+02        5.6400e+02</div><div class="line">...</div><div class="line"> [ dihedrals ] ; propers</div><div class="line">     N    CA     C         O    180.00   0.00000     9</div><div class="line">     N    CA    CB        OG      0.00   0.65084     9</div><div class="line">     N    CA    CB       HB1      0.00   0.65084     9</div><div class="line">     N    CA    CB       HB2      0.00   0.65084     9</div><div class="line">...</div><div class="line"> [ impropers ]</div></pre></td></tr></table></figure></p><p>我们需要在[bonds]中增加前一个氨基酸残基的联系连接,[impropers]中增加前后氨基酸残基的联系连接，可以简单的看非标准残基来源的氨基酸残基模板(aminoacids.rtp)或者查看<code>SEP_GMX.top</code>文件中删除的两个氢原子的部分，最后整理结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"> [ bonds ]</div><div class="line">     -C     N</div><div class="line">      N    CA        1.4620e-01     2.7506e+05</div><div class="line">      N     H        1.0130e-01     3.3740e+05</div><div class="line">     CA     C        1.5240e-01     2.6192e+05</div><div class="line">     CA    CB        1.5380e-01     2.5179e+05</div><div class="line">...</div><div class="line"> [ impropers ]</div><div class="line">    -C    CA     N     H</div><div class="line">    CA    +N     C     O</div></pre></td></tr></table></figure></p><h3 id="5-整理残基的hdb条目"><a href="#5-整理残基的hdb条目" class="headerlink" title="5.整理残基的hdb条目"></a>5.整理残基的hdb条目</h3><p>由于氢键一般有问题，我们需要重新绘制氢键，那么我们创建一个<code>sep.hdb</code>的文件，按照下图来进行设置(图片来源李老师博客):<br><a href="/images/2017/12/gmxhdb.png">图</a></p><p>结果如下图(可以抄SER的信息):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SEP  3</div><div class="line">1   1   H    N  -C   CA</div><div class="line">1   5   HA   CA  N   CB    C</div><div class="line">26HBCBCAOG</div></pre></td></tr></table></figure></p><h3 id="6-模拟尝试"><a href="#6-模拟尝试" class="headerlink" title="6.模拟尝试"></a>6.模拟尝试</h3><p>将gromacs 目录下(gromacs/share/gromacs/top)中的amber99sb-ildn.ff拷贝至实验目录下（如果找不到可以用which gmx_mpi），将<code>sep.rtp</code>文件和<code>sep.hdb</code>文件放到拷贝出来的amber99sb-ildn.ff目录下。且在top目录下的<code>residuetypes.dat</code>中申明SEP为蛋白，即:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">SEP     Protein ; sep，增加部分</div><div class="line">ABUProtein</div><div class="line">ACEProtein</div><div class="line">AIBProtein</div><div class="line">ALA  Protein</div><div class="line">ARG  Protein</div><div class="line">ARGNProtein</div><div class="line">ASNProtein</div><div class="line">ASN1  Protein</div><div class="line">...</div></pre></td></tr></table></figure></p><p>最后进行模拟尝试看是否可以跑通<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gmx_mpi pdb2gmx -f model.pdb -o model_process.gro -water tip3p -ignh</div></pre></td></tr></table></figure></p><p>若提示前一个残基或者末端残基报错，那么检查是否是上述两个文件出错，若提示缺失（SEP的）原子，那么创建<code>sep.atp</code>文件，在<code>SEP_GMX.top</code>,找到提示的缺失原子，放入该文件中，最后将<code>sep.atp</code>文件放到拷贝出来的amber99sb-ildn.ff目录下。</p><p>参考资料:<br><a href="http://jerkwin.github.io/2017/09/20/GROMACS%E9%9D%9E%E6%A0%87%E5%87%86%E6%AE%8B%E5%9F%BA%E6%95%99%E7%A8%8B2-%E8%8A%8B%E8%9E%BA%E6%AF%92%E7%B4%A0%E5%B0%8F%E8%82%BD%E5%AE%9E%E4%BE%8B/" target="_blank" rel="external">GROMACS非标准残基教程2-芋螺毒素小肽实例</a><br><a href="http://blog.sina.com.cn/s/blog_6ceaa7650101du7w.html" target="_blank" rel="external">向gromacs中添加小分子力场方法 </a><br><a href="http://blog.csdn.net/sinat_23241095/article/details/53836200" target="_blank" rel="external">amber中非标准氨基酸残基的参数生成</a><br><a href="http://ambermd.org/tutorials/basic/tutorial5/" target="_blank" rel="external">Simulating the Green Fluorescent Protein</a><br><a href="https://jerkwin.github.io/2015/12/08/%E4%BD%BF%E7%94%A8AmberTools+ACPYPE+Gaussian%E5%88%9B%E5%BB%BA%E5%B0%8F%E5%88%86%E5%AD%90GAFF%E5%8A%9B%E5%9C%BA%E7%9A%84%E6%8B%93%E6%89%91%E6%96%87%E4%BB%B6/" target="_blank" rel="external">使用AmberTools+ACPYPE+Gaussian创建小分子GAFF力场的拓扑文件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gromacs非标准残基构建&quot;&gt;&lt;a href=&quot;#Gromacs非标准残基构建&quot; class=&quot;headerlink&quot; title=&quot;Gromacs非标准残基构建&quot;&gt;&lt;/a&gt;Gromacs非标准残基构建&lt;/h1&gt;&lt;p&gt;李老师其实已经有非常详细的实例来讲解如何进行
      
    
    </summary>
    
      <category term="分子模拟" scheme="http://kangsgo.com/categories/%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F/"/>
    
    
      <category term="Gromacs" scheme="http://kangsgo.com/tags/Gromacs/"/>
    
  </entry>
  
</feed>
